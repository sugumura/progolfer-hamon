/* */ 
(function(process) {
  this.createjs = this.createjs || {};
  (function() {
    "use strict";
    function LoadQueue(preferXHR, basePath, crossOrigin) {
      this.AbstractLoader_constructor();
      this._plugins = [];
      this._typeCallbacks = {};
      this._extensionCallbacks = {};
      this.next = null;
      this.maintainScriptOrder = true;
      this.stopOnError = false;
      this._maxConnections = 1;
      this._availableLoaders = [createjs.ImageLoader, createjs.JavaScriptLoader, createjs.CSSLoader, createjs.JSONLoader, createjs.JSONPLoader, createjs.SoundLoader, createjs.ManifestLoader, createjs.SpriteSheetLoader, createjs.XMLLoader, createjs.SVGLoader, createjs.BinaryLoader, createjs.VideoLoader, createjs.TextLoader];
      this._defaultLoaderLength = this._availableLoaders.length;
      this.init(preferXHR, basePath, crossOrigin);
    }
    var p = createjs.extend(LoadQueue, createjs.AbstractLoader);
    var s = LoadQueue;
    p.init = function(preferXHR, basePath, crossOrigin) {
      this.useXHR = true;
      this.preferXHR = true;
      this._preferXHR = true;
      this.setPreferXHR(preferXHR);
      this._paused = false;
      this._basePath = basePath;
      this._crossOrigin = crossOrigin;
      this._loadStartWasDispatched = false;
      this._currentlyLoadingScript = null;
      this._currentLoads = [];
      this._loadQueue = [];
      this._loadQueueBackup = [];
      this._loadItemsById = {};
      this._loadItemsBySrc = {};
      this._loadedResults = {};
      this._loadedRawResults = {};
      this._numItems = 0;
      this._numItemsLoaded = 0;
      this._scriptOrder = [];
      this._loadedScripts = [];
      this._lastProgress = NaN;
    };
    s.loadTimeout = 8000;
    s.LOAD_TIMEOUT = 0;
    s.BINARY = createjs.AbstractLoader.BINARY;
    s.CSS = createjs.AbstractLoader.CSS;
    s.IMAGE = createjs.AbstractLoader.IMAGE;
    s.JAVASCRIPT = createjs.AbstractLoader.JAVASCRIPT;
    s.JSON = createjs.AbstractLoader.JSON;
    s.JSONP = createjs.AbstractLoader.JSONP;
    s.MANIFEST = createjs.AbstractLoader.MANIFEST;
    s.SOUND = createjs.AbstractLoader.SOUND;
    s.VIDEO = createjs.AbstractLoader.VIDEO;
    s.SVG = createjs.AbstractLoader.SVG;
    s.TEXT = createjs.AbstractLoader.TEXT;
    s.XML = createjs.AbstractLoader.XML;
    s.POST = createjs.AbstractLoader.POST;
    s.GET = createjs.AbstractLoader.GET;
    p.registerLoader = function(loader) {
      if (!loader || !loader.canLoadItem) {
        throw new Error("loader is of an incorrect type.");
      } else if (this._availableLoaders.indexOf(loader) != -1) {
        throw new Error("loader already exists.");
      }
      this._availableLoaders.unshift(loader);
    };
    p.unregisterLoader = function(loader) {
      var idx = this._availableLoaders.indexOf(loader);
      if (idx != -1 && idx < this._defaultLoaderLength - 1) {
        this._availableLoaders.splice(idx, 1);
      }
    };
    p.setUseXHR = function(value) {
      return this.setPreferXHR(value);
    };
    p.setPreferXHR = function(value) {
      this.preferXHR = (value != false && window.XMLHttpRequest != null);
      return this.preferXHR;
    };
    p.removeAll = function() {
      this.remove();
    };
    p.remove = function(idsOrUrls) {
      var args = null;
      if (idsOrUrls && !Array.isArray(idsOrUrls)) {
        args = [idsOrUrls];
      } else if (idsOrUrls) {
        args = idsOrUrls;
      } else if (arguments.length > 0) {
        return;
      }
      var itemsWereRemoved = false;
      if (!args) {
        this.close();
        for (var n in this._loadItemsById) {
          this._disposeItem(this._loadItemsById[n]);
        }
        this.init(this.preferXHR, this._basePath);
      } else {
        while (args.length) {
          var item = args.pop();
          var r = this.getResult(item);
          for (i = this._loadQueue.length - 1; i >= 0; i--) {
            loadItem = this._loadQueue[i].getItem();
            if (loadItem.id == item || loadItem.src == item) {
              this._loadQueue.splice(i, 1)[0].cancel();
              break;
            }
          }
          for (i = this._loadQueueBackup.length - 1; i >= 0; i--) {
            loadItem = this._loadQueueBackup[i].getItem();
            if (loadItem.id == item || loadItem.src == item) {
              this._loadQueueBackup.splice(i, 1)[0].cancel();
              break;
            }
          }
          if (r) {
            this._disposeItem(this.getItem(item));
          } else {
            for (var i = this._currentLoads.length - 1; i >= 0; i--) {
              var loadItem = this._currentLoads[i].getItem();
              if (loadItem.id == item || loadItem.src == item) {
                this._currentLoads.splice(i, 1)[0].cancel();
                itemsWereRemoved = true;
                break;
              }
            }
          }
        }
        if (itemsWereRemoved) {
          this._loadNext();
        }
      }
    };
    p.reset = function() {
      this.close();
      for (var n in this._loadItemsById) {
        this._disposeItem(this._loadItemsById[n]);
      }
      var a = [];
      for (var i = 0,
          l = this._loadQueueBackup.length; i < l; i++) {
        a.push(this._loadQueueBackup[i].getItem());
      }
      this.loadManifest(a, false);
    };
    p.installPlugin = function(plugin) {
      if (plugin == null) {
        return;
      }
      if (plugin.getPreloadHandlers != null) {
        this._plugins.push(plugin);
        var map = plugin.getPreloadHandlers();
        map.scope = plugin;
        if (map.types != null) {
          for (var i = 0,
              l = map.types.length; i < l; i++) {
            this._typeCallbacks[map.types[i]] = map;
          }
        }
        if (map.extensions != null) {
          for (i = 0, l = map.extensions.length; i < l; i++) {
            this._extensionCallbacks[map.extensions[i]] = map;
          }
        }
      }
    };
    p.setMaxConnections = function(value) {
      this._maxConnections = value;
      if (!this._paused && this._loadQueue.length > 0) {
        this._loadNext();
      }
    };
    p.loadFile = function(file, loadNow, basePath) {
      if (file == null) {
        var event = new createjs.ErrorEvent("PRELOAD_NO_FILE");
        this._sendError(event);
        return;
      }
      this._addItem(file, null, basePath);
      if (loadNow !== false) {
        this.setPaused(false);
      } else {
        this.setPaused(true);
      }
    };
    p.loadManifest = function(manifest, loadNow, basePath) {
      var fileList = null;
      var path = null;
      if (Array.isArray(manifest)) {
        if (manifest.length == 0) {
          var event = new createjs.ErrorEvent("PRELOAD_MANIFEST_EMPTY");
          this._sendError(event);
          return;
        }
        fileList = manifest;
      } else if (typeof(manifest) === "string") {
        fileList = [{
          src: manifest,
          type: s.MANIFEST
        }];
      } else if (typeof(manifest) == "object") {
        if (manifest.src !== undefined) {
          if (manifest.type == null) {
            manifest.type = s.MANIFEST;
          } else if (manifest.type != s.MANIFEST) {
            var event = new createjs.ErrorEvent("PRELOAD_MANIFEST_TYPE");
            this._sendError(event);
          }
          fileList = [manifest];
        } else if (manifest.manifest !== undefined) {
          fileList = manifest.manifest;
          path = manifest.path;
        }
      } else {
        var event = new createjs.ErrorEvent("PRELOAD_MANIFEST_NULL");
        this._sendError(event);
        return;
      }
      for (var i = 0,
          l = fileList.length; i < l; i++) {
        this._addItem(fileList[i], path, basePath);
      }
      if (loadNow !== false) {
        this.setPaused(false);
      } else {
        this.setPaused(true);
      }
    };
    p.load = function() {
      this.setPaused(false);
    };
    p.getItem = function(value) {
      return this._loadItemsById[value] || this._loadItemsBySrc[value];
    };
    p.getResult = function(value, rawResult) {
      var item = this._loadItemsById[value] || this._loadItemsBySrc[value];
      if (item == null) {
        return null;
      }
      var id = item.id;
      if (rawResult && this._loadedRawResults[id]) {
        return this._loadedRawResults[id];
      }
      return this._loadedResults[id];
    };
    p.getItems = function(loaded) {
      var arr = [];
      for (var n in this._loadItemsById) {
        var item = this._loadItemsById[n];
        var result = this.getResult(n);
        if (loaded === true && result == null) {
          continue;
        }
        arr.push({
          item: item,
          result: result,
          rawResult: this.getResult(n, true)
        });
      }
      return arr;
    };
    p.setPaused = function(value) {
      this._paused = value;
      if (!this._paused) {
        this._loadNext();
      }
    };
    p.close = function() {
      while (this._currentLoads.length) {
        this._currentLoads.pop().cancel();
      }
      this._scriptOrder.length = 0;
      this._loadedScripts.length = 0;
      this.loadStartWasDispatched = false;
      this._itemCount = 0;
      this._lastProgress = NaN;
    };
    p._addItem = function(value, path, basePath) {
      var item = this._createLoadItem(value, path, basePath);
      if (item == null) {
        return;
      }
      var loader = this._createLoader(item);
      if (loader != null) {
        if ("plugins" in loader) {
          loader.plugins = this._plugins;
        }
        item._loader = loader;
        this._loadQueue.push(loader);
        this._loadQueueBackup.push(loader);
        this._numItems++;
        this._updateProgress();
        if ((this.maintainScriptOrder && item.type == createjs.LoadQueue.JAVASCRIPT) || item.maintainOrder === true) {
          this._scriptOrder.push(item);
          this._loadedScripts.push(null);
        }
      }
    };
    p._createLoadItem = function(value, path, basePath) {
      var item = createjs.LoadItem.create(value);
      if (item == null) {
        return null;
      }
      var bp = "";
      var useBasePath = basePath || this._basePath;
      if (item.src instanceof Object) {
        if (!item.type) {
          return null;
        }
        if (path) {
          bp = path;
          var pathMatch = createjs.URLUtils.parseURI(path);
          if (useBasePath != null && !pathMatch.absolute && !pathMatch.relative) {
            bp = useBasePath + bp;
          }
        } else if (useBasePath != null) {
          bp = useBasePath;
        }
      } else {
        var match = createjs.URLUtils.parseURI(item.src);
        if (match.extension) {
          item.ext = match.extension;
        }
        if (item.type == null) {
          item.type = createjs.RequestUtils.getTypeByExtension(item.ext);
        }
        var autoId = item.src;
        if (!match.absolute && !match.relative) {
          if (path) {
            bp = path;
            var pathMatch = createjs.URLUtils.parseURI(path);
            autoId = path + autoId;
            if (useBasePath != null && !pathMatch.absolute && !pathMatch.relative) {
              bp = useBasePath + bp;
            }
          } else if (useBasePath != null) {
            bp = useBasePath;
          }
        }
        item.src = bp + item.src;
      }
      item.path = bp;
      if (item.id === undefined || item.id === null || item.id === "") {
        item.id = autoId;
      }
      var customHandler = this._typeCallbacks[item.type] || this._extensionCallbacks[item.ext];
      if (customHandler) {
        var result = customHandler.callback.call(customHandler.scope, item, this);
        if (result === false) {
          return null;
        } else if (result === true) {} else if (result != null) {
          item._loader = result;
        }
        match = createjs.URLUtils.parseURI(item.src);
        if (match.extension != null) {
          item.ext = match.extension;
        }
      }
      this._loadItemsById[item.id] = item;
      this._loadItemsBySrc[item.src] = item;
      if (item.crossOrigin == null) {
        item.crossOrigin = this._crossOrigin;
      }
      return item;
    };
    p._createLoader = function(item) {
      if (item._loader != null) {
        return item._loader;
      }
      var preferXHR = this.preferXHR;
      for (var i = 0; i < this._availableLoaders.length; i++) {
        var loader = this._availableLoaders[i];
        if (loader && loader.canLoadItem(item)) {
          return new loader(item, preferXHR);
        }
      }
      return null;
    };
    p._loadNext = function() {
      if (this._paused) {
        return;
      }
      if (!this._loadStartWasDispatched) {
        this._sendLoadStart();
        this._loadStartWasDispatched = true;
      }
      if (this._numItems == this._numItemsLoaded) {
        this.loaded = true;
        this._sendComplete();
        if (this.next && this.next.load) {
          this.next.load();
        }
      } else {
        this.loaded = false;
      }
      for (var i = 0; i < this._loadQueue.length; i++) {
        if (this._currentLoads.length >= this._maxConnections) {
          break;
        }
        var loader = this._loadQueue[i];
        if (!this._canStartLoad(loader)) {
          continue;
        }
        this._loadQueue.splice(i, 1);
        i--;
        this._loadItem(loader);
      }
    };
    p._loadItem = function(loader) {
      loader.on("fileload", this._handleFileLoad, this);
      loader.on("progress", this._handleProgress, this);
      loader.on("complete", this._handleFileComplete, this);
      loader.on("error", this._handleError, this);
      loader.on("fileerror", this._handleFileError, this);
      this._currentLoads.push(loader);
      this._sendFileStart(loader.getItem());
      loader.load();
    };
    p._handleFileLoad = function(event) {
      event.target = null;
      this.dispatchEvent(event);
    };
    p._handleFileError = function(event) {
      var newEvent = new createjs.ErrorEvent("FILE_LOAD_ERROR", null, event.item);
      this._sendError(newEvent);
    };
    p._handleError = function(event) {
      var loader = event.target;
      this._numItemsLoaded++;
      this._finishOrderedItem(loader, true);
      this._updateProgress();
      var newEvent = new createjs.ErrorEvent("FILE_LOAD_ERROR", null, loader.getItem());
      this._sendError(newEvent);
      if (!this.stopOnError) {
        this._removeLoadItem(loader);
        this._cleanLoadItem(loader);
        this._loadNext();
      } else {
        this.setPaused(true);
      }
    };
    p._handleFileComplete = function(event) {
      var loader = event.target;
      var item = loader.getItem();
      var result = loader.getResult();
      this._loadedResults[item.id] = result;
      var rawResult = loader.getResult(true);
      if (rawResult != null && rawResult !== result) {
        this._loadedRawResults[item.id] = rawResult;
      }
      this._saveLoadedItems(loader);
      this._removeLoadItem(loader);
      if (!this._finishOrderedItem(loader)) {
        this._processFinishedLoad(item, loader);
      }
      this._cleanLoadItem(loader);
    };
    p._saveLoadedItems = function(loader) {
      var list = loader.getLoadedItems();
      if (list === null) {
        return;
      }
      for (var i = 0; i < list.length; i++) {
        var item = list[i].item;
        this._loadItemsBySrc[item.src] = item;
        this._loadItemsById[item.id] = item;
        this._loadedResults[item.id] = list[i].result;
        this._loadedRawResults[item.id] = list[i].rawResult;
      }
    };
    p._finishOrderedItem = function(loader, loadFailed) {
      var item = loader.getItem();
      if ((this.maintainScriptOrder && item.type == createjs.LoadQueue.JAVASCRIPT) || item.maintainOrder) {
        if (loader instanceof createjs.JavaScriptLoader) {
          this._currentlyLoadingScript = false;
        }
        var index = createjs.indexOf(this._scriptOrder, item);
        if (index == -1) {
          return false;
        }
        this._loadedScripts[index] = (loadFailed === true) ? true : item;
        this._checkScriptLoadOrder();
        return true;
      }
      return false;
    };
    p._checkScriptLoadOrder = function() {
      var l = this._loadedScripts.length;
      for (var i = 0; i < l; i++) {
        var item = this._loadedScripts[i];
        if (item === null) {
          break;
        }
        if (item === true) {
          continue;
        }
        var loadItem = this._loadedResults[item.id];
        if (item.type == createjs.LoadQueue.JAVASCRIPT) {
          createjs.DomUtils.appendToHead(loadItem);
        }
        var loader = item._loader;
        this._processFinishedLoad(item, loader);
        this._loadedScripts[i] = true;
      }
    };
    p._processFinishedLoad = function(item, loader) {
      this._numItemsLoaded++;
      if (!this.maintainScriptOrder && item.type == createjs.LoadQueue.JAVASCRIPT) {
        var tag = loader.getTag();
        createjs.DomUtils.appendToHead(tag);
      }
      this._updateProgress();
      this._sendFileComplete(item, loader);
      this._loadNext();
    };
    p._canStartLoad = function(loader) {
      if (!this.maintainScriptOrder || loader.preferXHR) {
        return true;
      }
      var item = loader.getItem();
      if (item.type != createjs.LoadQueue.JAVASCRIPT) {
        return true;
      }
      if (this._currentlyLoadingScript) {
        return false;
      }
      var index = this._scriptOrder.indexOf(item);
      var i = 0;
      while (i < index) {
        var checkItem = this._loadedScripts[i];
        if (checkItem == null) {
          return false;
        }
        i++;
      }
      this._currentlyLoadingScript = true;
      return true;
    };
    p._removeLoadItem = function(loader) {
      var l = this._currentLoads.length;
      for (var i = 0; i < l; i++) {
        if (this._currentLoads[i] == loader) {
          this._currentLoads.splice(i, 1);
          break;
        }
      }
    };
    p._cleanLoadItem = function(loader) {
      var item = loader.getItem();
      if (item) {
        delete item._loader;
      }
    };
    p._handleProgress = function(event) {
      var loader = event.target;
      this._sendFileProgress(loader.getItem(), loader.progress);
      this._updateProgress();
    };
    p._updateProgress = function() {
      var loaded = this._numItemsLoaded / this._numItems;
      var remaining = this._numItems - this._numItemsLoaded;
      if (remaining > 0) {
        var chunk = 0;
        for (var i = 0,
            l = this._currentLoads.length; i < l; i++) {
          chunk += this._currentLoads[i].progress;
        }
        loaded += (chunk / remaining) * (remaining / this._numItems);
      }
      if (this._lastProgress != loaded) {
        this._sendProgress(loaded);
        this._lastProgress = loaded;
      }
    };
    p._disposeItem = function(item) {
      delete this._loadedResults[item.id];
      delete this._loadedRawResults[item.id];
      delete this._loadItemsById[item.id];
      delete this._loadItemsBySrc[item.src];
    };
    p._sendFileProgress = function(item, progress) {
      if (this._isCanceled() || this._paused) {
        return;
      }
      if (!this.hasEventListener("fileprogress")) {
        return;
      }
      var event = new createjs.Event("fileprogress");
      event.progress = progress;
      event.loaded = progress;
      event.total = 1;
      event.item = item;
      this.dispatchEvent(event);
    };
    p._sendFileComplete = function(item, loader) {
      if (this._isCanceled() || this._paused) {
        return;
      }
      var event = new createjs.Event("fileload");
      event.loader = loader;
      event.item = item;
      event.result = this._loadedResults[item.id];
      event.rawResult = this._loadedRawResults[item.id];
      if (item.completeHandler) {
        item.completeHandler(event);
      }
      this.hasEventListener("fileload") && this.dispatchEvent(event);
    };
    p._sendFileStart = function(item) {
      var event = new createjs.Event("filestart");
      event.item = item;
      this.hasEventListener("filestart") && this.dispatchEvent(event);
    };
    p.toString = function() {
      return "[PreloadJS LoadQueue]";
    };
    createjs.LoadQueue = createjs.promote(LoadQueue, "AbstractLoader");
  }());
})(require('process'));
