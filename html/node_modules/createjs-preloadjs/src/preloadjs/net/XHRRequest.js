/* */ 
(function(process) {
  this.createjs = this.createjs || {};
  (function() {
    "use strict";
    function XHRRequest(item) {
      this.AbstractRequest_constructor(item);
      this._request = null;
      this._loadTimeout = null;
      this._xhrLevel = 1;
      this._response = null;
      this._rawResponse = null;
      this._canceled = false;
      this._handleLoadStartProxy = createjs.proxy(this._handleLoadStart, this);
      this._handleProgressProxy = createjs.proxy(this._handleProgress, this);
      this._handleAbortProxy = createjs.proxy(this._handleAbort, this);
      this._handleErrorProxy = createjs.proxy(this._handleError, this);
      this._handleTimeoutProxy = createjs.proxy(this._handleTimeout, this);
      this._handleLoadProxy = createjs.proxy(this._handleLoad, this);
      this._handleReadyStateChangeProxy = createjs.proxy(this._handleReadyStateChange, this);
      if (!this._createXHR(item)) {}
    }
    ;
    var p = createjs.extend(XHRRequest, createjs.AbstractRequest);
    XHRRequest.ACTIVEX_VERSIONS = ["Msxml2.XMLHTTP.6.0", "Msxml2.XMLHTTP.5.0", "Msxml2.XMLHTTP.4.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"];
    p.getResult = function(raw) {
      if (raw && this._rawResponse) {
        return this._rawResponse;
      }
      return this._response;
    };
    p.cancel = function() {
      this.canceled = true;
      this._clean();
      this._request.abort();
    };
    p.load = function() {
      if (this._request == null) {
        this._handleError();
        return;
      }
      if (this._request.addEventListener != null) {
        this._request.addEventListener("loadstart", this._handleLoadStartProxy, false);
        this._request.addEventListener("progress", this._handleProgressProxy, false);
        this._request.addEventListener("abort", this._handleAbortProxy, false);
        this._request.addEventListener("error", this._handleErrorProxy, false);
        this._request.addEventListener("timeout", this._handleTimeoutProxy, false);
        this._request.addEventListener("load", this._handleLoadProxy, false);
        this._request.addEventListener("readystatechange", this._handleReadyStateChangeProxy, false);
      } else {
        this._request.onloadstart = this._handleLoadStartProxy;
        this._request.onprogress = this._handleProgressProxy;
        this._request.onabort = this._handleAbortProxy;
        this._request.onerror = this._handleErrorProxy;
        this._request.ontimeout = this._handleTimeoutProxy;
        this._request.onload = this._handleLoadProxy;
        this._request.onreadystatechange = this._handleReadyStateChangeProxy;
      }
      if (this._xhrLevel == 1) {
        this._loadTimeout = setTimeout(createjs.proxy(this._handleTimeout, this), this._item.loadTimeout);
      }
      try {
        if (!this._item.values) {
          this._request.send();
        } else {
          this._request.send(createjs.URLUtils.formatQueryString(this._item.values));
        }
      } catch (error) {
        this.dispatchEvent(new createjs.ErrorEvent("XHR_SEND", null, error));
      }
    };
    p.setResponseType = function(type) {
      if (type === 'blob') {
        type = window.URL ? 'blob' : 'arraybuffer';
        this._responseType = type;
      }
      this._request.responseType = type;
    };
    p.getAllResponseHeaders = function() {
      if (this._request.getAllResponseHeaders instanceof Function) {
        return this._request.getAllResponseHeaders();
      } else {
        return null;
      }
    };
    p.getResponseHeader = function(header) {
      if (this._request.getResponseHeader instanceof Function) {
        return this._request.getResponseHeader(header);
      } else {
        return null;
      }
    };
    p._handleProgress = function(event) {
      if (!event || event.loaded > 0 && event.total == 0) {
        return;
      }
      var newEvent = new createjs.ProgressEvent(event.loaded, event.total);
      this.dispatchEvent(newEvent);
    };
    p._handleLoadStart = function(event) {
      clearTimeout(this._loadTimeout);
      this.dispatchEvent("loadstart");
    };
    p._handleAbort = function(event) {
      this._clean();
      this.dispatchEvent(new createjs.ErrorEvent("XHR_ABORTED", null, event));
    };
    p._handleError = function(event) {
      this._clean();
      this.dispatchEvent(new createjs.ErrorEvent(event.message));
    };
    p._handleReadyStateChange = function(event) {
      if (this._request.readyState == 4) {
        this._handleLoad();
      }
    };
    p._handleLoad = function(event) {
      if (this.loaded) {
        return;
      }
      this.loaded = true;
      var error = this._checkError();
      if (error) {
        this._handleError(error);
        return;
      }
      this._response = this._getResponse();
      if (this._responseType === 'arraybuffer') {
        try {
          this._response = new Blob([this._response]);
        } catch (e) {
          window.BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
          if (e.name === 'TypeError' && window.BlobBuilder) {
            var builder = new BlobBuilder();
            builder.append(this._response);
            this._response = builder.getBlob();
          }
        }
      }
      this._clean();
      this.dispatchEvent(new createjs.Event("complete"));
    };
    p._handleTimeout = function(event) {
      this._clean();
      this.dispatchEvent(new createjs.ErrorEvent("PRELOAD_TIMEOUT", null, event));
    };
    p._checkError = function() {
      var status = parseInt(this._request.status);
      if (status >= 400 && status <= 599) {
        return new Error(status);
      } else {
        return null;
      }
    };
    p._getResponse = function() {
      if (this._response != null) {
        return this._response;
      }
      if (this._request.response != null) {
        return this._request.response;
      }
      try {
        if (this._request.responseText != null) {
          return this._request.responseText;
        }
      } catch (e) {}
      try {
        if (this._request.responseXML != null) {
          return this._request.responseXML;
        }
      } catch (e) {}
      return null;
    };
    p._createXHR = function(item) {
      var crossdomain = createjs.URLUtils.isCrossDomain(item);
      var headers = {};
      var req = null;
      if (window.XMLHttpRequest) {
        req = new XMLHttpRequest();
        if (crossdomain && req.withCredentials === undefined && window.XDomainRequest) {
          req = new XDomainRequest();
        }
      } else {
        for (var i = 0,
            l = s.ACTIVEX_VERSIONS.length; i < l; i++) {
          var axVersion = s.ACTIVEX_VERSIONS[i];
          try {
            req = new ActiveXObject(axVersion);
            break;
          } catch (e) {}
        }
        if (req == null) {
          return false;
        }
      }
      if (item.mimeType == null && createjs.RequestUtils.isText(item.type)) {
        item.mimeType = "text/plain; charset=utf-8";
      }
      if (item.mimeType && req.overrideMimeType) {
        req.overrideMimeType(item.mimeType);
      }
      this._xhrLevel = (typeof req.responseType === "string") ? 2 : 1;
      var src = null;
      if (item.method == createjs.AbstractLoader.GET) {
        src = createjs.URLUtils.buildURI(item.src, item.values);
      } else {
        src = item.src;
      }
      req.open(item.method || createjs.AbstractLoader.GET, src, true);
      if (crossdomain && req instanceof XMLHttpRequest && this._xhrLevel == 1) {
        headers["Origin"] = location.origin;
      }
      if (item.values && item.method == createjs.AbstractLoader.POST) {
        headers["Content-Type"] = "application/x-www-form-urlencoded";
      }
      if (!crossdomain && !headers["X-Requested-With"]) {
        headers["X-Requested-With"] = "XMLHttpRequest";
      }
      if (item.headers) {
        for (var n in item.headers) {
          headers[n] = item.headers[n];
        }
      }
      for (n in headers) {
        req.setRequestHeader(n, headers[n]);
      }
      if (req instanceof XMLHttpRequest && item.withCredentials !== undefined) {
        req.withCredentials = item.withCredentials;
      }
      this._request = req;
      return true;
    };
    p._clean = function() {
      clearTimeout(this._loadTimeout);
      if (this._request.removeEventListener != null) {
        this._request.removeEventListener("loadstart", this._handleLoadStartProxy);
        this._request.removeEventListener("progress", this._handleProgressProxy);
        this._request.removeEventListener("abort", this._handleAbortProxy);
        this._request.removeEventListener("error", this._handleErrorProxy);
        this._request.removeEventListener("timeout", this._handleTimeoutProxy);
        this._request.removeEventListener("load", this._handleLoadProxy);
        this._request.removeEventListener("readystatechange", this._handleReadyStateChangeProxy);
      } else {
        this._request.onloadstart = null;
        this._request.onprogress = null;
        this._request.onabort = null;
        this._request.onerror = null;
        this._request.ontimeout = null;
        this._request.onload = null;
        this._request.onreadystatechange = null;
      }
    };
    p.toString = function() {
      return "[PreloadJS XHRRequest]";
    };
    createjs.XHRRequest = createjs.promote(XHRRequest, "AbstractRequest");
  }());
})(require('process'));
