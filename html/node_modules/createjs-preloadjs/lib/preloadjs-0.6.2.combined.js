/* */ 
"format cjs";
(function(process) {
  this.createjs = this.createjs || {};
  (function() {
    "use strict";
    var s = createjs.PreloadJS = createjs.PreloadJS || {};
    s.version = "0.6.2";
    s.buildDate = "Thu, 26 Nov 2015 20:44:31 GMT";
  })();
  this.createjs = this.createjs || {};
  createjs.extend = function(subclass, superclass) {
    "use strict";
    function o() {
      this.constructor = subclass;
    }
    o.prototype = superclass.prototype;
    return (subclass.prototype = new o());
  };
  this.createjs = this.createjs || {};
  createjs.promote = function(subclass, prefix) {
    "use strict";
    var subP = subclass.prototype,
        supP = (Object.getPrototypeOf && Object.getPrototypeOf(subP)) || subP.__proto__;
    if (supP) {
      subP[(prefix += "_") + "constructor"] = supP.constructor;
      for (var n in supP) {
        if (subP.hasOwnProperty(n) && (typeof supP[n] == "function")) {
          subP[prefix + n] = supP[n];
        }
      }
    }
    return subclass;
  };
  this.createjs = this.createjs || {};
  (function() {
    "use strict";
    createjs.proxy = function(method, scope) {
      var aArgs = Array.prototype.slice.call(arguments, 2);
      return function() {
        return method.apply(scope, Array.prototype.slice.call(arguments, 0).concat(aArgs));
      };
    };
  }());
  this.createjs = this.createjs || {};
  createjs.indexOf = function(array, searchElement) {
    "use strict";
    for (var i = 0,
        l = array.length; i < l; i++) {
      if (searchElement === array[i]) {
        return i;
      }
    }
    return -1;
  };
  this.createjs = this.createjs || {};
  (function() {
    "use strict";
    function Event(type, bubbles, cancelable) {
      this.type = type;
      this.target = null;
      this.currentTarget = null;
      this.eventPhase = 0;
      this.bubbles = !!bubbles;
      this.cancelable = !!cancelable;
      this.timeStamp = (new Date()).getTime();
      this.defaultPrevented = false;
      this.propagationStopped = false;
      this.immediatePropagationStopped = false;
      this.removed = false;
    }
    var p = Event.prototype;
    p.preventDefault = function() {
      this.defaultPrevented = this.cancelable && true;
    };
    p.stopPropagation = function() {
      this.propagationStopped = true;
    };
    p.stopImmediatePropagation = function() {
      this.immediatePropagationStopped = this.propagationStopped = true;
    };
    p.remove = function() {
      this.removed = true;
    };
    p.clone = function() {
      return new Event(this.type, this.bubbles, this.cancelable);
    };
    p.set = function(props) {
      for (var n in props) {
        this[n] = props[n];
      }
      return this;
    };
    p.toString = function() {
      return "[Event (type=" + this.type + ")]";
    };
    createjs.Event = Event;
  }());
  this.createjs = this.createjs || {};
  (function() {
    "use strict";
    function ErrorEvent(title, message, data) {
      this.Event_constructor("error");
      this.title = title;
      this.message = message;
      this.data = data;
    }
    var p = createjs.extend(ErrorEvent, createjs.Event);
    p.clone = function() {
      return new createjs.ErrorEvent(this.title, this.message, this.data);
    };
    createjs.ErrorEvent = createjs.promote(ErrorEvent, "Event");
  }());
  this.createjs = this.createjs || {};
  (function() {
    "use strict";
    function EventDispatcher() {
      this._listeners = null;
      this._captureListeners = null;
    }
    var p = EventDispatcher.prototype;
    EventDispatcher.initialize = function(target) {
      target.addEventListener = p.addEventListener;
      target.on = p.on;
      target.removeEventListener = target.off = p.removeEventListener;
      target.removeAllEventListeners = p.removeAllEventListeners;
      target.hasEventListener = p.hasEventListener;
      target.dispatchEvent = p.dispatchEvent;
      target._dispatchEvent = p._dispatchEvent;
      target.willTrigger = p.willTrigger;
    };
    p.addEventListener = function(type, listener, useCapture) {
      var listeners;
      if (useCapture) {
        listeners = this._captureListeners = this._captureListeners || {};
      } else {
        listeners = this._listeners = this._listeners || {};
      }
      var arr = listeners[type];
      if (arr) {
        this.removeEventListener(type, listener, useCapture);
      }
      arr = listeners[type];
      if (!arr) {
        listeners[type] = [listener];
      } else {
        arr.push(listener);
      }
      return listener;
    };
    p.on = function(type, listener, scope, once, data, useCapture) {
      if (listener.handleEvent) {
        scope = scope || listener;
        listener = listener.handleEvent;
      }
      scope = scope || this;
      return this.addEventListener(type, function(evt) {
        listener.call(scope, evt, data);
        once && evt.remove();
      }, useCapture);
    };
    p.removeEventListener = function(type, listener, useCapture) {
      var listeners = useCapture ? this._captureListeners : this._listeners;
      if (!listeners) {
        return;
      }
      var arr = listeners[type];
      if (!arr) {
        return;
      }
      for (var i = 0,
          l = arr.length; i < l; i++) {
        if (arr[i] == listener) {
          if (l == 1) {
            delete(listeners[type]);
          } else {
            arr.splice(i, 1);
          }
          break;
        }
      }
    };
    p.off = p.removeEventListener;
    p.removeAllEventListeners = function(type) {
      if (!type) {
        this._listeners = this._captureListeners = null;
      } else {
        if (this._listeners) {
          delete(this._listeners[type]);
        }
        if (this._captureListeners) {
          delete(this._captureListeners[type]);
        }
      }
    };
    p.dispatchEvent = function(eventObj, bubbles, cancelable) {
      if (typeof eventObj == "string") {
        var listeners = this._listeners;
        if (!bubbles && (!listeners || !listeners[eventObj])) {
          return true;
        }
        eventObj = new createjs.Event(eventObj, bubbles, cancelable);
      } else if (eventObj.target && eventObj.clone) {
        eventObj = eventObj.clone();
      }
      try {
        eventObj.target = this;
      } catch (e) {}
      if (!eventObj.bubbles || !this.parent) {
        this._dispatchEvent(eventObj, 2);
      } else {
        var top = this,
            list = [top];
        while (top.parent) {
          list.push(top = top.parent);
        }
        var i,
            l = list.length;
        for (i = l - 1; i >= 0 && !eventObj.propagationStopped; i--) {
          list[i]._dispatchEvent(eventObj, 1 + (i == 0));
        }
        for (i = 1; i < l && !eventObj.propagationStopped; i++) {
          list[i]._dispatchEvent(eventObj, 3);
        }
      }
      return !eventObj.defaultPrevented;
    };
    p.hasEventListener = function(type) {
      var listeners = this._listeners,
          captureListeners = this._captureListeners;
      return !!((listeners && listeners[type]) || (captureListeners && captureListeners[type]));
    };
    p.willTrigger = function(type) {
      var o = this;
      while (o) {
        if (o.hasEventListener(type)) {
          return true;
        }
        o = o.parent;
      }
      return false;
    };
    p.toString = function() {
      return "[EventDispatcher]";
    };
    p._dispatchEvent = function(eventObj, eventPhase) {
      var l,
          listeners = (eventPhase == 1) ? this._captureListeners : this._listeners;
      if (eventObj && listeners) {
        var arr = listeners[eventObj.type];
        if (!arr || !(l = arr.length)) {
          return;
        }
        try {
          eventObj.currentTarget = this;
        } catch (e) {}
        try {
          eventObj.eventPhase = eventPhase;
        } catch (e) {}
        eventObj.removed = false;
        arr = arr.slice();
        for (var i = 0; i < l && !eventObj.immediatePropagationStopped; i++) {
          var o = arr[i];
          if (o.handleEvent) {
            o.handleEvent(eventObj);
          } else {
            o(eventObj);
          }
          if (eventObj.removed) {
            this.off(eventObj.type, o, eventPhase == 1);
            eventObj.removed = false;
          }
        }
      }
    };
    createjs.EventDispatcher = EventDispatcher;
  }());
  this.createjs = this.createjs || {};
  (function(scope) {
    "use strict";
    function ProgressEvent(loaded, total) {
      this.Event_constructor("progress");
      this.loaded = loaded;
      this.total = (total == null) ? 1 : total;
      this.progress = (total == 0) ? 0 : this.loaded / this.total;
    }
    ;
    var p = createjs.extend(ProgressEvent, createjs.Event);
    p.clone = function() {
      return new createjs.ProgressEvent(this.loaded, this.total);
    };
    createjs.ProgressEvent = createjs.promote(ProgressEvent, "Event");
  }(window));
  ;
  (function() {
    var isLoader = typeof define === "function" && define.amd;
    var objectTypes = {
      "function": true,
      "object": true
    };
    var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;
    var root = objectTypes[typeof window] && window || this,
        freeGlobal = freeExports && objectTypes[typeof module] && module && !module.nodeType && typeof global == "object" && global;
    if (freeGlobal && (freeGlobal["global"] === freeGlobal || freeGlobal["window"] === freeGlobal || freeGlobal["self"] === freeGlobal)) {
      root = freeGlobal;
    }
    function runInContext(context, exports) {
      context || (context = root["Object"]());
      exports || (exports = root["Object"]());
      var Number = context["Number"] || root["Number"],
          String = context["String"] || root["String"],
          Object = context["Object"] || root["Object"],
          Date = context["Date"] || root["Date"],
          SyntaxError = context["SyntaxError"] || root["SyntaxError"],
          TypeError = context["TypeError"] || root["TypeError"],
          Math = context["Math"] || root["Math"],
          nativeJSON = context["JSON"] || root["JSON"];
      if (typeof nativeJSON == "object" && nativeJSON) {
        exports.stringify = nativeJSON.stringify;
        exports.parse = nativeJSON.parse;
      }
      var objectProto = Object.prototype,
          getClass = objectProto.toString,
          isProperty,
          forEach,
          undef;
      var isExtended = new Date(-3509827334573292);
      try {
        isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 && isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;
      } catch (exception) {}
      function has(name) {
        if (has[name] !== undef) {
          return has[name];
        }
        var isSupported;
        if (name == "bug-string-char-index") {
          isSupported = "a"[0] != "a";
        } else if (name == "json") {
          isSupported = has("json-stringify") && has("json-parse");
        } else {
          var value,
              serialized = '{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';
          if (name == "json-stringify") {
            var stringify = exports.stringify,
                stringifySupported = typeof stringify == "function" && isExtended;
            if (stringifySupported) {
              (value = function() {
                return 1;
              }).toJSON = value;
              try {
                stringifySupported = stringify(0) === "0" && stringify(new Number()) === "0" && stringify(new String()) == '""' && stringify(getClass) === undef && stringify(undef) === undef && stringify() === undef && stringify(value) === "1" && stringify([value]) == "[1]" && stringify([undef]) == "[null]" && stringify(null) == "null" && stringify([undef, getClass, null]) == "[null,null,null]" && stringify({"a": [value, true, false, null, "\x00\b\n\f\r\t"]}) == serialized && stringify(null, value) === "1" && stringify([1, 2], null, 1) == "[\n 1,\n 2\n]" && stringify(new Date(-8.64e15)) == '"-271821-04-20T00:00:00.000Z"' && stringify(new Date(8.64e15)) == '"+275760-09-13T00:00:00.000Z"' && stringify(new Date(-621987552e5)) == '"-000001-01-01T00:00:00.000Z"' && stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"';
              } catch (exception) {
                stringifySupported = false;
              }
            }
            isSupported = stringifySupported;
          }
          if (name == "json-parse") {
            var parse = exports.parse;
            if (typeof parse == "function") {
              try {
                if (parse("0") === 0 && !parse(false)) {
                  value = parse(serialized);
                  var parseSupported = value["a"].length == 5 && value["a"][0] === 1;
                  if (parseSupported) {
                    try {
                      parseSupported = !parse('"\t"');
                    } catch (exception) {}
                    if (parseSupported) {
                      try {
                        parseSupported = parse("01") !== 1;
                      } catch (exception) {}
                    }
                    if (parseSupported) {
                      try {
                        parseSupported = parse("1.") !== 1;
                      } catch (exception) {}
                    }
                  }
                }
              } catch (exception) {
                parseSupported = false;
              }
            }
            isSupported = parseSupported;
          }
        }
        return has[name] = !!isSupported;
      }
      if (!has("json")) {
        var functionClass = "[object Function]",
            dateClass = "[object Date]",
            numberClass = "[object Number]",
            stringClass = "[object String]",
            arrayClass = "[object Array]",
            booleanClass = "[object Boolean]";
        var charIndexBuggy = has("bug-string-char-index");
        if (!isExtended) {
          var floor = Math.floor;
          var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
          var getDay = function(year, month) {
            return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);
          };
        }
        if (!(isProperty = objectProto.hasOwnProperty)) {
          isProperty = function(property) {
            var members = {},
                constructor;
            if ((members.__proto__ = null, members.__proto__ = {"toString": 1}, members).toString != getClass) {
              isProperty = function(property) {
                var original = this.__proto__,
                    result = property in (this.__proto__ = null, this);
                this.__proto__ = original;
                return result;
              };
            } else {
              constructor = members.constructor;
              isProperty = function(property) {
                var parent = (this.constructor || constructor).prototype;
                return property in this && !(property in parent && this[property] === parent[property]);
              };
            }
            members = null;
            return isProperty.call(this, property);
          };
        }
        forEach = function(object, callback) {
          var size = 0,
              Properties,
              members,
              property;
          (Properties = function() {
            this.valueOf = 0;
          }).prototype.valueOf = 0;
          members = new Properties();
          for (property in members) {
            if (isProperty.call(members, property)) {
              size++;
            }
          }
          Properties = members = null;
          if (!size) {
            members = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"];
            forEach = function(object, callback) {
              var isFunction = getClass.call(object) == functionClass,
                  property,
                  length;
              var hasProperty = !isFunction && typeof object.constructor != "function" && objectTypes[typeof object.hasOwnProperty] && object.hasOwnProperty || isProperty;
              for (property in object) {
                if (!(isFunction && property == "prototype") && hasProperty.call(object, property)) {
                  callback(property);
                }
              }
              for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property))
                ;
            };
          } else if (size == 2) {
            forEach = function(object, callback) {
              var members = {},
                  isFunction = getClass.call(object) == functionClass,
                  property;
              for (property in object) {
                if (!(isFunction && property == "prototype") && !isProperty.call(members, property) && (members[property] = 1) && isProperty.call(object, property)) {
                  callback(property);
                }
              }
            };
          } else {
            forEach = function(object, callback) {
              var isFunction = getClass.call(object) == functionClass,
                  property,
                  isConstructor;
              for (property in object) {
                if (!(isFunction && property == "prototype") && isProperty.call(object, property) && !(isConstructor = property === "constructor")) {
                  callback(property);
                }
              }
              if (isConstructor || isProperty.call(object, (property = "constructor"))) {
                callback(property);
              }
            };
          }
          return forEach(object, callback);
        };
        if (!has("json-stringify")) {
          var Escapes = {
            92: "\\\\",
            34: '\\"',
            8: "\\b",
            12: "\\f",
            10: "\\n",
            13: "\\r",
            9: "\\t"
          };
          var leadingZeroes = "000000";
          var toPaddedString = function(width, value) {
            return (leadingZeroes + (value || 0)).slice(-width);
          };
          var unicodePrefix = "\\u00";
          var quote = function(value) {
            var result = '"',
                index = 0,
                length = value.length,
                useCharIndex = !charIndexBuggy || length > 10;
            var symbols = useCharIndex && (charIndexBuggy ? value.split("") : value);
            for (; index < length; index++) {
              var charCode = value.charCodeAt(index);
              switch (charCode) {
                case 8:
                case 9:
                case 10:
                case 12:
                case 13:
                case 34:
                case 92:
                  result += Escapes[charCode];
                  break;
                default:
                  if (charCode < 32) {
                    result += unicodePrefix + toPaddedString(2, charCode.toString(16));
                    break;
                  }
                  result += useCharIndex ? symbols[index] : value.charAt(index);
              }
            }
            return result + '"';
          };
          var serialize = function(property, object, callback, properties, whitespace, indentation, stack) {
            var value,
                className,
                year,
                month,
                date,
                time,
                hours,
                minutes,
                seconds,
                milliseconds,
                results,
                element,
                index,
                length,
                prefix,
                result;
            try {
              value = object[property];
            } catch (exception) {}
            if (typeof value == "object" && value) {
              className = getClass.call(value);
              if (className == dateClass && !isProperty.call(value, "toJSON")) {
                if (value > -1 / 0 && value < 1 / 0) {
                  if (getDay) {
                    date = floor(value / 864e5);
                    for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++)
                      ;
                    for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++)
                      ;
                    date = 1 + date - getDay(year, month);
                    time = (value % 864e5 + 864e5) % 864e5;
                    hours = floor(time / 36e5) % 24;
                    minutes = floor(time / 6e4) % 60;
                    seconds = floor(time / 1e3) % 60;
                    milliseconds = time % 1e3;
                  } else {
                    year = value.getUTCFullYear();
                    month = value.getUTCMonth();
                    date = value.getUTCDate();
                    hours = value.getUTCHours();
                    minutes = value.getUTCMinutes();
                    seconds = value.getUTCSeconds();
                    milliseconds = value.getUTCMilliseconds();
                  }
                  value = (year <= 0 || year >= 1e4 ? (year < 0 ? "-" : "+") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) + "-" + toPaddedString(2, month + 1) + "-" + toPaddedString(2, date) + "T" + toPaddedString(2, hours) + ":" + toPaddedString(2, minutes) + ":" + toPaddedString(2, seconds) + "." + toPaddedString(3, milliseconds) + "Z";
                } else {
                  value = null;
                }
              } else if (typeof value.toJSON == "function" && ((className != numberClass && className != stringClass && className != arrayClass) || isProperty.call(value, "toJSON"))) {
                value = value.toJSON(property);
              }
            }
            if (callback) {
              value = callback.call(object, property, value);
            }
            if (value === null) {
              return "null";
            }
            className = getClass.call(value);
            if (className == booleanClass) {
              return "" + value;
            } else if (className == numberClass) {
              return value > -1 / 0 && value < 1 / 0 ? "" + value : "null";
            } else if (className == stringClass) {
              return quote("" + value);
            }
            if (typeof value == "object") {
              for (length = stack.length; length--; ) {
                if (stack[length] === value) {
                  throw TypeError();
                }
              }
              stack.push(value);
              results = [];
              prefix = indentation;
              indentation += whitespace;
              if (className == arrayClass) {
                for (index = 0, length = value.length; index < length; index++) {
                  element = serialize(index, value, callback, properties, whitespace, indentation, stack);
                  results.push(element === undef ? "null" : element);
                }
                result = results.length ? (whitespace ? "[\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "]" : ("[" + results.join(",") + "]")) : "[]";
              } else {
                forEach(properties || value, function(property) {
                  var element = serialize(property, value, callback, properties, whitespace, indentation, stack);
                  if (element !== undef) {
                    results.push(quote(property) + ":" + (whitespace ? " " : "") + element);
                  }
                });
                result = results.length ? (whitespace ? "{\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "}" : ("{" + results.join(",") + "}")) : "{}";
              }
              stack.pop();
              return result;
            }
          };
          exports.stringify = function(source, filter, width) {
            var whitespace,
                callback,
                properties,
                className;
            if (objectTypes[typeof filter] && filter) {
              if ((className = getClass.call(filter)) == functionClass) {
                callback = filter;
              } else if (className == arrayClass) {
                properties = {};
                for (var index = 0,
                    length = filter.length,
                    value; index < length; value = filter[index++], ((className = getClass.call(value)), className == stringClass || className == numberClass) && (properties[value] = 1))
                  ;
              }
            }
            if (width) {
              if ((className = getClass.call(width)) == numberClass) {
                if ((width -= width % 1) > 0) {
                  for (whitespace = "", width > 10 && (width = 10); whitespace.length < width; whitespace += " ")
                    ;
                }
              } else if (className == stringClass) {
                whitespace = width.length <= 10 ? width : width.slice(0, 10);
              }
            }
            return serialize("", (value = {}, value[""] = source, value), callback, properties, whitespace, "", []);
          };
        }
        if (!has("json-parse")) {
          var fromCharCode = String.fromCharCode;
          var Unescapes = {
            92: "\\",
            34: '"',
            47: "/",
            98: "\b",
            116: "\t",
            110: "\n",
            102: "\f",
            114: "\r"
          };
          var Index,
              Source;
          var abort = function() {
            Index = Source = null;
            throw SyntaxError();
          };
          var lex = function() {
            var source = Source,
                length = source.length,
                value,
                begin,
                position,
                isSigned,
                charCode;
            while (Index < length) {
              charCode = source.charCodeAt(Index);
              switch (charCode) {
                case 9:
                case 10:
                case 13:
                case 32:
                  Index++;
                  break;
                case 123:
                case 125:
                case 91:
                case 93:
                case 58:
                case 44:
                  value = charIndexBuggy ? source.charAt(Index) : source[Index];
                  Index++;
                  return value;
                case 34:
                  for (value = "@", Index++; Index < length; ) {
                    charCode = source.charCodeAt(Index);
                    if (charCode < 32) {
                      abort();
                    } else if (charCode == 92) {
                      charCode = source.charCodeAt(++Index);
                      switch (charCode) {
                        case 92:
                        case 34:
                        case 47:
                        case 98:
                        case 116:
                        case 110:
                        case 102:
                        case 114:
                          value += Unescapes[charCode];
                          Index++;
                          break;
                        case 117:
                          begin = ++Index;
                          for (position = Index + 4; Index < position; Index++) {
                            charCode = source.charCodeAt(Index);
                            if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
                              abort();
                            }
                          }
                          value += fromCharCode("0x" + source.slice(begin, Index));
                          break;
                        default:
                          abort();
                      }
                    } else {
                      if (charCode == 34) {
                        break;
                      }
                      charCode = source.charCodeAt(Index);
                      begin = Index;
                      while (charCode >= 32 && charCode != 92 && charCode != 34) {
                        charCode = source.charCodeAt(++Index);
                      }
                      value += source.slice(begin, Index);
                    }
                  }
                  if (source.charCodeAt(Index) == 34) {
                    Index++;
                    return value;
                  }
                  abort();
                default:
                  begin = Index;
                  if (charCode == 45) {
                    isSigned = true;
                    charCode = source.charCodeAt(++Index);
                  }
                  if (charCode >= 48 && charCode <= 57) {
                    if (charCode == 48 && ((charCode = source.charCodeAt(Index + 1)), charCode >= 48 && charCode <= 57)) {
                      abort();
                    }
                    isSigned = false;
                    for (; Index < length && ((charCode = source.charCodeAt(Index)), charCode >= 48 && charCode <= 57); Index++)
                      ;
                    if (source.charCodeAt(Index) == 46) {
                      position = ++Index;
                      for (; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++)
                        ;
                      if (position == Index) {
                        abort();
                      }
                      Index = position;
                    }
                    charCode = source.charCodeAt(Index);
                    if (charCode == 101 || charCode == 69) {
                      charCode = source.charCodeAt(++Index);
                      if (charCode == 43 || charCode == 45) {
                        Index++;
                      }
                      for (position = Index; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++)
                        ;
                      if (position == Index) {
                        abort();
                      }
                      Index = position;
                    }
                    return +source.slice(begin, Index);
                  }
                  if (isSigned) {
                    abort();
                  }
                  if (source.slice(Index, Index + 4) == "true") {
                    Index += 4;
                    return true;
                  } else if (source.slice(Index, Index + 5) == "false") {
                    Index += 5;
                    return false;
                  } else if (source.slice(Index, Index + 4) == "null") {
                    Index += 4;
                    return null;
                  }
                  abort();
              }
            }
            return "$";
          };
          var get = function(value) {
            var results,
                hasMembers;
            if (value == "$") {
              abort();
            }
            if (typeof value == "string") {
              if ((charIndexBuggy ? value.charAt(0) : value[0]) == "@") {
                return value.slice(1);
              }
              if (value == "[") {
                results = [];
                for (; ; hasMembers || (hasMembers = true)) {
                  value = lex();
                  if (value == "]") {
                    break;
                  }
                  if (hasMembers) {
                    if (value == ",") {
                      value = lex();
                      if (value == "]") {
                        abort();
                      }
                    } else {
                      abort();
                    }
                  }
                  if (value == ",") {
                    abort();
                  }
                  results.push(get(value));
                }
                return results;
              } else if (value == "{") {
                results = {};
                for (; ; hasMembers || (hasMembers = true)) {
                  value = lex();
                  if (value == "}") {
                    break;
                  }
                  if (hasMembers) {
                    if (value == ",") {
                      value = lex();
                      if (value == "}") {
                        abort();
                      }
                    } else {
                      abort();
                    }
                  }
                  if (value == "," || typeof value != "string" || (charIndexBuggy ? value.charAt(0) : value[0]) != "@" || lex() != ":") {
                    abort();
                  }
                  results[value.slice(1)] = get(lex());
                }
                return results;
              }
              abort();
            }
            return value;
          };
          var update = function(source, property, callback) {
            var element = walk(source, property, callback);
            if (element === undef) {
              delete source[property];
            } else {
              source[property] = element;
            }
          };
          var walk = function(source, property, callback) {
            var value = source[property],
                length;
            if (typeof value == "object" && value) {
              if (getClass.call(value) == arrayClass) {
                for (length = value.length; length--; ) {
                  update(value, length, callback);
                }
              } else {
                forEach(value, function(property) {
                  update(value, property, callback);
                });
              }
            }
            return callback.call(source, property, value);
          };
          exports.parse = function(source, callback) {
            var result,
                value;
            Index = 0;
            Source = "" + source;
            result = get(lex());
            if (lex() != "$") {
              abort();
            }
            Index = Source = null;
            return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[""] = result, value), "", callback) : result;
          };
        }
      }
      exports["runInContext"] = runInContext;
      return exports;
    }
    if (freeExports && !isLoader) {
      runInContext(root, freeExports);
    } else {
      var nativeJSON = root.JSON,
          previousJSON = root["JSON3"],
          isRestored = false;
      var JSON3 = runInContext(root, (root["JSON3"] = {"noConflict": function() {
          if (!isRestored) {
            isRestored = true;
            root.JSON = nativeJSON;
            root["JSON3"] = previousJSON;
            nativeJSON = previousJSON = null;
          }
          return JSON3;
        }}));
      root.JSON = {
        "parse": JSON3.parse,
        "stringify": JSON3.stringify
      };
    }
    if (isLoader) {
      define(function() {
        return JSON3;
      });
    }
  }).call(this);
  (function() {
    var s = {};
    s.appendToHead = function(el) {
      s.getHead().appendChild(el);
    };
    s.getHead = function() {
      return document.head || document.getElementsByTagName("head")[0];
    };
    s.getBody = function() {
      return document.body || document.getElementsByTagName("body")[0];
    };
    createjs.DomUtils = s;
  }());
  (function() {
    var s = {};
    s.parseXML = function(text, type) {
      var xml = null;
      try {
        if (window.DOMParser) {
          var parser = new DOMParser();
          xml = parser.parseFromString(text, type);
        }
      } catch (e) {}
      if (!xml) {
        try {
          xml = new ActiveXObject("Microsoft.XMLDOM");
          xml.async = false;
          xml.loadXML(text);
        } catch (e) {
          xml = null;
        }
      }
      return xml;
    };
    s.parseJSON = function(value) {
      if (value == null) {
        return null;
      }
      try {
        return JSON.parse(value);
      } catch (e) {
        throw e;
      }
    };
    createjs.DataUtils = s;
  }());
  this.createjs = this.createjs || {};
  (function() {
    "use strict";
    function LoadItem() {
      this.src = null;
      this.type = null;
      this.id = null;
      this.maintainOrder = false;
      this.callback = null;
      this.data = null;
      this.method = createjs.LoadItem.GET;
      this.values = null;
      this.headers = null;
      this.withCredentials = false;
      this.mimeType = null;
      this.crossOrigin = null;
      this.loadTimeout = s.LOAD_TIMEOUT_DEFAULT;
    }
    ;
    var p = LoadItem.prototype = {};
    var s = LoadItem;
    s.LOAD_TIMEOUT_DEFAULT = 8000;
    s.create = function(value) {
      if (typeof value == "string") {
        var item = new LoadItem();
        item.src = value;
        return item;
      } else if (value instanceof s) {
        return value;
      } else if (value instanceof Object && value.src) {
        if (value.loadTimeout == null) {
          value.loadTimeout = s.LOAD_TIMEOUT_DEFAULT;
        }
        return value;
      } else {
        throw new Error("Type not recognized.");
      }
    };
    p.set = function(props) {
      for (var n in props) {
        this[n] = props[n];
      }
      return this;
    };
    createjs.LoadItem = s;
  }());
  (function() {
    var s = {};
    s.ABSOLUTE_PATT = /^(?:\w+:)?\/{2}/i;
    s.RELATIVE_PATT = (/^[./]*?\//i);
    s.EXTENSION_PATT = /\/?[^/]+\.(\w{1,5})$/i;
    s.parseURI = function(path) {
      var info = {
        absolute: false,
        relative: false
      };
      if (path == null) {
        return info;
      }
      var queryIndex = path.indexOf("?");
      if (queryIndex > -1) {
        path = path.substr(0, queryIndex);
      }
      var match;
      if (s.ABSOLUTE_PATT.test(path)) {
        info.absolute = true;
      } else if (s.RELATIVE_PATT.test(path)) {
        info.relative = true;
      }
      if (match = path.match(s.EXTENSION_PATT)) {
        info.extension = match[1].toLowerCase();
      }
      return info;
    };
    s.formatQueryString = function(data, query) {
      if (data == null) {
        throw new Error('You must specify data.');
      }
      var params = [];
      for (var n in data) {
        params.push(n + '=' + escape(data[n]));
      }
      if (query) {
        params = params.concat(query);
      }
      return params.join('&');
    };
    s.buildPath = function(src, data) {
      if (data == null) {
        return src;
      }
      var query = [];
      var idx = src.indexOf('?');
      if (idx != -1) {
        var q = src.slice(idx + 1);
        query = query.concat(q.split('&'));
      }
      if (idx != -1) {
        return src.slice(0, idx) + '?' + this.formatQueryString(data, query);
      } else {
        return src + '?' + this.formatQueryString(data, query);
      }
    };
    s.isCrossDomain = function(item) {
      var target = document.createElement("a");
      target.href = item.src;
      var host = document.createElement("a");
      host.href = location.href;
      var crossdomain = (target.hostname != "") && (target.port != host.port || target.protocol != host.protocol || target.hostname != host.hostname);
      return crossdomain;
    };
    s.isLocal = function(item) {
      var target = document.createElement("a");
      target.href = item.src;
      return target.hostname == "" && target.protocol == "file:";
    };
    s.isBinary = function(type) {
      switch (type) {
        case createjs.AbstractLoader.IMAGE:
        case createjs.AbstractLoader.BINARY:
          return true;
        default:
          return false;
      }
    };
    s.isImageTag = function(item) {
      return item instanceof HTMLImageElement;
    };
    s.isAudioTag = function(item) {
      if (window.HTMLAudioElement) {
        return item instanceof HTMLAudioElement;
      } else {
        return false;
      }
    };
    s.isVideoTag = function(item) {
      if (window.HTMLVideoElement) {
        return item instanceof HTMLVideoElement;
      } else {
        return false;
      }
    };
    s.isText = function(type) {
      switch (type) {
        case createjs.AbstractLoader.TEXT:
        case createjs.AbstractLoader.JSON:
        case createjs.AbstractLoader.MANIFEST:
        case createjs.AbstractLoader.XML:
        case createjs.AbstractLoader.CSS:
        case createjs.AbstractLoader.SVG:
        case createjs.AbstractLoader.JAVASCRIPT:
        case createjs.AbstractLoader.SPRITESHEET:
          return true;
        default:
          return false;
      }
    };
    s.getTypeByExtension = function(extension) {
      if (extension == null) {
        return createjs.AbstractLoader.TEXT;
      }
      switch (extension.toLowerCase()) {
        case "jpeg":
        case "jpg":
        case "gif":
        case "png":
        case "webp":
        case "bmp":
          return createjs.AbstractLoader.IMAGE;
        case "ogg":
        case "mp3":
        case "webm":
          return createjs.AbstractLoader.SOUND;
        case "mp4":
        case "webm":
        case "ts":
          return createjs.AbstractLoader.VIDEO;
        case "json":
          return createjs.AbstractLoader.JSON;
        case "xml":
          return createjs.AbstractLoader.XML;
        case "css":
          return createjs.AbstractLoader.CSS;
        case "js":
          return createjs.AbstractLoader.JAVASCRIPT;
        case 'svg':
          return createjs.AbstractLoader.SVG;
        default:
          return createjs.AbstractLoader.TEXT;
      }
    };
    createjs.RequestUtils = s;
  }());
  this.createjs = this.createjs || {};
  (function() {
    "use strict";
    function AbstractLoader(loadItem, preferXHR, type) {
      this.EventDispatcher_constructor();
      this.loaded = false;
      this.canceled = false;
      this.progress = 0;
      this.type = type;
      this.resultFormatter = null;
      if (loadItem) {
        this._item = createjs.LoadItem.create(loadItem);
      } else {
        this._item = null;
      }
      this._preferXHR = preferXHR;
      this._result = null;
      this._rawResult = null;
      this._loadedItems = null;
      this._tagSrcAttribute = null;
      this._tag = null;
    }
    ;
    var p = createjs.extend(AbstractLoader, createjs.EventDispatcher);
    var s = AbstractLoader;
    s.POST = "POST";
    s.GET = "GET";
    s.BINARY = "binary";
    s.CSS = "css";
    s.IMAGE = "image";
    s.JAVASCRIPT = "javascript";
    s.JSON = "json";
    s.JSONP = "jsonp";
    s.MANIFEST = "manifest";
    s.SOUND = "sound";
    s.VIDEO = "video";
    s.SPRITESHEET = "spritesheet";
    s.SVG = "svg";
    s.TEXT = "text";
    s.XML = "xml";
    p.getItem = function() {
      return this._item;
    };
    p.getResult = function(raw) {
      return raw ? this._rawResult : this._result;
    };
    p.getTag = function() {
      return this._tag;
    };
    p.setTag = function(tag) {
      this._tag = tag;
    };
    p.load = function() {
      this._createRequest();
      this._request.on("complete", this, this);
      this._request.on("progress", this, this);
      this._request.on("loadStart", this, this);
      this._request.on("abort", this, this);
      this._request.on("timeout", this, this);
      this._request.on("error", this, this);
      var evt = new createjs.Event("initialize");
      evt.loader = this._request;
      this.dispatchEvent(evt);
      this._request.load();
    };
    p.cancel = function() {
      this.canceled = true;
      this.destroy();
    };
    p.destroy = function() {
      if (this._request) {
        this._request.removeAllEventListeners();
        this._request.destroy();
      }
      this._request = null;
      this._item = null;
      this._rawResult = null;
      this._result = null;
      this._loadItems = null;
      this.removeAllEventListeners();
    };
    p.getLoadedItems = function() {
      return this._loadedItems;
    };
    p._createRequest = function() {
      if (!this._preferXHR) {
        this._request = new createjs.TagRequest(this._item, this._tag || this._createTag(), this._tagSrcAttribute);
      } else {
        this._request = new createjs.XHRRequest(this._item);
      }
    };
    p._createTag = function(src) {
      return null;
    };
    p._sendLoadStart = function() {
      if (this._isCanceled()) {
        return;
      }
      this.dispatchEvent("loadstart");
    };
    p._sendProgress = function(value) {
      if (this._isCanceled()) {
        return;
      }
      var event = null;
      if (typeof(value) == "number") {
        this.progress = value;
        event = new createjs.ProgressEvent(this.progress);
      } else {
        event = value;
        this.progress = value.loaded / value.total;
        event.progress = this.progress;
        if (isNaN(this.progress) || this.progress == Infinity) {
          this.progress = 0;
        }
      }
      this.hasEventListener("progress") && this.dispatchEvent(event);
    };
    p._sendComplete = function() {
      if (this._isCanceled()) {
        return;
      }
      this.loaded = true;
      var event = new createjs.Event("complete");
      event.rawResult = this._rawResult;
      if (this._result != null) {
        event.result = this._result;
      }
      this.dispatchEvent(event);
    };
    p._sendError = function(event) {
      if (this._isCanceled() || !this.hasEventListener("error")) {
        return;
      }
      if (event == null) {
        event = new createjs.ErrorEvent("PRELOAD_ERROR_EMPTY");
      }
      this.dispatchEvent(event);
    };
    p._isCanceled = function() {
      if (window.createjs == null || this.canceled) {
        return true;
      }
      return false;
    };
    p.resultFormatter = null;
    p.handleEvent = function(event) {
      switch (event.type) {
        case "complete":
          this._rawResult = event.target._response;
          var result = this.resultFormatter && this.resultFormatter(this);
          if (result instanceof Function) {
            result.call(this, createjs.proxy(this._resultFormatSuccess, this), createjs.proxy(this._resultFormatFailed, this));
          } else {
            this._result = result || this._rawResult;
            this._sendComplete();
          }
          break;
        case "progress":
          this._sendProgress(event);
          break;
        case "error":
          this._sendError(event);
          break;
        case "loadstart":
          this._sendLoadStart();
          break;
        case "abort":
        case "timeout":
          if (!this._isCanceled()) {
            this.dispatchEvent(new createjs.ErrorEvent("PRELOAD_" + event.type.toUpperCase() + "_ERROR"));
          }
          break;
      }
    };
    p._resultFormatSuccess = function(result) {
      this._result = result;
      this._sendComplete();
    };
    p._resultFormatFailed = function(event) {
      this._sendError(event);
    };
    p.buildPath = function(src, data) {
      return createjs.RequestUtils.buildPath(src, data);
    };
    p.toString = function() {
      return "[PreloadJS AbstractLoader]";
    };
    createjs.AbstractLoader = createjs.promote(AbstractLoader, "EventDispatcher");
  }());
  this.createjs = this.createjs || {};
  (function() {
    "use strict";
    function AbstractMediaLoader(loadItem, preferXHR, type) {
      this.AbstractLoader_constructor(loadItem, preferXHR, type);
      this.resultFormatter = this._formatResult;
      this._tagSrcAttribute = "src";
      this.on("initialize", this._updateXHR, this);
    }
    ;
    var p = createjs.extend(AbstractMediaLoader, createjs.AbstractLoader);
    p.load = function() {
      if (!this._tag) {
        this._tag = this._createTag(this._item.src);
      }
      this._tag.preload = "auto";
      this._tag.load();
      this.AbstractLoader_load();
    };
    p._createTag = function() {};
    p._createRequest = function() {
      if (!this._preferXHR) {
        this._request = new createjs.MediaTagRequest(this._item, this._tag || this._createTag(), this._tagSrcAttribute);
      } else {
        this._request = new createjs.XHRRequest(this._item);
      }
    };
    p._updateXHR = function(event) {
      if (event.loader.setResponseType) {
        event.loader.setResponseType("blob");
      }
    };
    p._formatResult = function(loader) {
      this._tag.removeEventListener && this._tag.removeEventListener("canplaythrough", this._loadedHandler);
      this._tag.onstalled = null;
      if (this._preferXHR) {
        var URL = window.URL || window.webkitURL;
        var result = loader.getResult(true);
        loader.getTag().src = URL.createObjectURL(result);
      }
      return loader.getTag();
    };
    createjs.AbstractMediaLoader = createjs.promote(AbstractMediaLoader, "AbstractLoader");
  }());
  this.createjs = this.createjs || {};
  (function() {
    "use strict";
    var AbstractRequest = function(item) {
      this._item = item;
    };
    var p = createjs.extend(AbstractRequest, createjs.EventDispatcher);
    p.load = function() {};
    p.destroy = function() {};
    p.cancel = function() {};
    createjs.AbstractRequest = createjs.promote(AbstractRequest, "EventDispatcher");
  }());
  this.createjs = this.createjs || {};
  (function() {
    "use strict";
    function TagRequest(loadItem, tag, srcAttribute) {
      this.AbstractRequest_constructor(loadItem);
      this._tag = tag;
      this._tagSrcAttribute = srcAttribute;
      this._loadedHandler = createjs.proxy(this._handleTagComplete, this);
      this._addedToDOM = false;
      this._startTagVisibility = null;
    }
    ;
    var p = createjs.extend(TagRequest, createjs.AbstractRequest);
    p.load = function() {
      this._tag.onload = createjs.proxy(this._handleTagComplete, this);
      this._tag.onreadystatechange = createjs.proxy(this._handleReadyStateChange, this);
      this._tag.onerror = createjs.proxy(this._handleError, this);
      var evt = new createjs.Event("initialize");
      evt.loader = this._tag;
      this.dispatchEvent(evt);
      this._hideTag();
      this._loadTimeout = setTimeout(createjs.proxy(this._handleTimeout, this), this._item.loadTimeout);
      this._tag[this._tagSrcAttribute] = this._item.src;
      if (this._tag.parentNode == null) {
        window.document.body.appendChild(this._tag);
        this._addedToDOM = true;
      }
    };
    p.destroy = function() {
      this._clean();
      this._tag = null;
      this.AbstractRequest_destroy();
    };
    p._handleReadyStateChange = function() {
      clearTimeout(this._loadTimeout);
      var tag = this._tag;
      if (tag.readyState == "loaded" || tag.readyState == "complete") {
        this._handleTagComplete();
      }
    };
    p._handleError = function() {
      this._clean();
      this.dispatchEvent("error");
    };
    p._handleTagComplete = function() {
      this._rawResult = this._tag;
      this._result = this.resultFormatter && this.resultFormatter(this) || this._rawResult;
      this._clean();
      this._showTag();
      this.dispatchEvent("complete");
    };
    p._handleTimeout = function() {
      this._clean();
      this.dispatchEvent(new createjs.Event("timeout"));
    };
    p._clean = function() {
      this._tag.onload = null;
      this._tag.onreadystatechange = null;
      this._tag.onerror = null;
      if (this._addedToDOM && this._tag.parentNode != null) {
        this._tag.parentNode.removeChild(this._tag);
      }
      clearTimeout(this._loadTimeout);
    };
    p._hideTag = function() {
      this._startTagVisibility = this._tag.style.visibility;
      this._tag.style.visibility = "hidden";
    };
    p._showTag = function() {
      this._tag.style.visibility = this._startTagVisibility;
    };
    p._handleStalled = function() {};
    createjs.TagRequest = createjs.promote(TagRequest, "AbstractRequest");
  }());
  this.createjs = this.createjs || {};
  (function() {
    "use strict";
    function MediaTagRequest(loadItem, tag, srcAttribute) {
      this.AbstractRequest_constructor(loadItem);
      this._tag = tag;
      this._tagSrcAttribute = srcAttribute;
      this._loadedHandler = createjs.proxy(this._handleTagComplete, this);
    }
    ;
    var p = createjs.extend(MediaTagRequest, createjs.TagRequest);
    var s = MediaTagRequest;
    p.load = function() {
      var sc = createjs.proxy(this._handleStalled, this);
      this._stalledCallback = sc;
      var pc = createjs.proxy(this._handleProgress, this);
      this._handleProgress = pc;
      this._tag.addEventListener("stalled", sc);
      this._tag.addEventListener("progress", pc);
      this._tag.addEventListener && this._tag.addEventListener("canplaythrough", this._loadedHandler, false);
      this.TagRequest_load();
    };
    p._handleReadyStateChange = function() {
      clearTimeout(this._loadTimeout);
      var tag = this._tag;
      if (tag.readyState == "loaded" || tag.readyState == "complete") {
        this._handleTagComplete();
      }
    };
    p._handleStalled = function() {};
    p._handleProgress = function(event) {
      if (!event || event.loaded > 0 && event.total == 0) {
        return;
      }
      var newEvent = new createjs.ProgressEvent(event.loaded, event.total);
      this.dispatchEvent(newEvent);
    };
    p._clean = function() {
      this._tag.removeEventListener && this._tag.removeEventListener("canplaythrough", this._loadedHandler);
      this._tag.removeEventListener("stalled", this._stalledCallback);
      this._tag.removeEventListener("progress", this._progressCallback);
      this.TagRequest__clean();
    };
    createjs.MediaTagRequest = createjs.promote(MediaTagRequest, "TagRequest");
  }());
  this.createjs = this.createjs || {};
  (function() {
    "use strict";
    function XHRRequest(item) {
      this.AbstractRequest_constructor(item);
      this._request = null;
      this._loadTimeout = null;
      this._xhrLevel = 1;
      this._response = null;
      this._rawResponse = null;
      this._canceled = false;
      this._handleLoadStartProxy = createjs.proxy(this._handleLoadStart, this);
      this._handleProgressProxy = createjs.proxy(this._handleProgress, this);
      this._handleAbortProxy = createjs.proxy(this._handleAbort, this);
      this._handleErrorProxy = createjs.proxy(this._handleError, this);
      this._handleTimeoutProxy = createjs.proxy(this._handleTimeout, this);
      this._handleLoadProxy = createjs.proxy(this._handleLoad, this);
      this._handleReadyStateChangeProxy = createjs.proxy(this._handleReadyStateChange, this);
      if (!this._createXHR(item)) {}
    }
    ;
    var p = createjs.extend(XHRRequest, createjs.AbstractRequest);
    XHRRequest.ACTIVEX_VERSIONS = ["Msxml2.XMLHTTP.6.0", "Msxml2.XMLHTTP.5.0", "Msxml2.XMLHTTP.4.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"];
    p.getResult = function(raw) {
      if (raw && this._rawResponse) {
        return this._rawResponse;
      }
      return this._response;
    };
    p.cancel = function() {
      this.canceled = true;
      this._clean();
      this._request.abort();
    };
    p.load = function() {
      if (this._request == null) {
        this._handleError();
        return;
      }
      if (this._request.addEventListener != null) {
        this._request.addEventListener("loadstart", this._handleLoadStartProxy, false);
        this._request.addEventListener("progress", this._handleProgressProxy, false);
        this._request.addEventListener("abort", this._handleAbortProxy, false);
        this._request.addEventListener("error", this._handleErrorProxy, false);
        this._request.addEventListener("timeout", this._handleTimeoutProxy, false);
        this._request.addEventListener("load", this._handleLoadProxy, false);
        this._request.addEventListener("readystatechange", this._handleReadyStateChangeProxy, false);
      } else {
        this._request.onloadstart = this._handleLoadStartProxy;
        this._request.onprogress = this._handleProgressProxy;
        this._request.onabort = this._handleAbortProxy;
        this._request.onerror = this._handleErrorProxy;
        this._request.ontimeout = this._handleTimeoutProxy;
        this._request.onload = this._handleLoadProxy;
        this._request.onreadystatechange = this._handleReadyStateChangeProxy;
      }
      if (this._xhrLevel == 1) {
        this._loadTimeout = setTimeout(createjs.proxy(this._handleTimeout, this), this._item.loadTimeout);
      }
      try {
        if (!this._item.values || this._item.method == createjs.AbstractLoader.GET) {
          this._request.send();
        } else if (this._item.method == createjs.AbstractLoader.POST) {
          this._request.send(createjs.RequestUtils.formatQueryString(this._item.values));
        }
      } catch (error) {
        this.dispatchEvent(new createjs.ErrorEvent("XHR_SEND", null, error));
      }
    };
    p.setResponseType = function(type) {
      if (type === 'blob') {
        type = window.URL ? 'blob' : 'arraybuffer';
        this._responseType = type;
      }
      this._request.responseType = type;
    };
    p.getAllResponseHeaders = function() {
      if (this._request.getAllResponseHeaders instanceof Function) {
        return this._request.getAllResponseHeaders();
      } else {
        return null;
      }
    };
    p.getResponseHeader = function(header) {
      if (this._request.getResponseHeader instanceof Function) {
        return this._request.getResponseHeader(header);
      } else {
        return null;
      }
    };
    p._handleProgress = function(event) {
      if (!event || event.loaded > 0 && event.total == 0) {
        return;
      }
      var newEvent = new createjs.ProgressEvent(event.loaded, event.total);
      this.dispatchEvent(newEvent);
    };
    p._handleLoadStart = function(event) {
      clearTimeout(this._loadTimeout);
      this.dispatchEvent("loadstart");
    };
    p._handleAbort = function(event) {
      this._clean();
      this.dispatchEvent(new createjs.ErrorEvent("XHR_ABORTED", null, event));
    };
    p._handleError = function(event) {
      this._clean();
      this.dispatchEvent(new createjs.ErrorEvent(event.message));
    };
    p._handleReadyStateChange = function(event) {
      if (this._request.readyState == 4) {
        this._handleLoad();
      }
    };
    p._handleLoad = function(event) {
      if (this.loaded) {
        return;
      }
      this.loaded = true;
      var error = this._checkError();
      if (error) {
        this._handleError(error);
        return;
      }
      this._response = this._getResponse();
      if (this._responseType === 'arraybuffer') {
        try {
          this._response = new Blob([this._response]);
        } catch (e) {
          window.BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
          if (e.name === 'TypeError' && window.BlobBuilder) {
            var builder = new BlobBuilder();
            builder.append(this._response);
            this._response = builder.getBlob();
          }
        }
      }
      this._clean();
      this.dispatchEvent(new createjs.Event("complete"));
    };
    p._handleTimeout = function(event) {
      this._clean();
      this.dispatchEvent(new createjs.ErrorEvent("PRELOAD_TIMEOUT", null, event));
    };
    p._checkError = function() {
      var status = parseInt(this._request.status);
      switch (status) {
        case 404:
        case 0:
          return new Error(status);
      }
      return null;
    };
    p._getResponse = function() {
      if (this._response != null) {
        return this._response;
      }
      if (this._request.response != null) {
        return this._request.response;
      }
      try {
        if (this._request.responseText != null) {
          return this._request.responseText;
        }
      } catch (e) {}
      try {
        if (this._request.responseXML != null) {
          return this._request.responseXML;
        }
      } catch (e) {}
      return null;
    };
    p._createXHR = function(item) {
      var crossdomain = createjs.RequestUtils.isCrossDomain(item);
      var headers = {};
      var req = null;
      if (window.XMLHttpRequest) {
        req = new XMLHttpRequest();
        if (crossdomain && req.withCredentials === undefined && window.XDomainRequest) {
          req = new XDomainRequest();
        }
      } else {
        for (var i = 0,
            l = s.ACTIVEX_VERSIONS.length; i < l; i++) {
          var axVersion = s.ACTIVEX_VERSIONS[i];
          try {
            req = new ActiveXObject(axVersion);
            break;
          } catch (e) {}
        }
        if (req == null) {
          return false;
        }
      }
      if (item.mimeType == null && createjs.RequestUtils.isText(item.type)) {
        item.mimeType = "text/plain; charset=utf-8";
      }
      if (item.mimeType && req.overrideMimeType) {
        req.overrideMimeType(item.mimeType);
      }
      this._xhrLevel = (typeof req.responseType === "string") ? 2 : 1;
      var src = null;
      if (item.method == createjs.AbstractLoader.GET) {
        src = createjs.RequestUtils.buildPath(item.src, item.values);
      } else {
        src = item.src;
      }
      req.open(item.method || createjs.AbstractLoader.GET, src, true);
      if (crossdomain && req instanceof XMLHttpRequest && this._xhrLevel == 1) {
        headers["Origin"] = location.origin;
      }
      if (item.values && item.method == createjs.AbstractLoader.POST) {
        headers["Content-Type"] = "application/x-www-form-urlencoded";
      }
      if (!crossdomain && !headers["X-Requested-With"]) {
        headers["X-Requested-With"] = "XMLHttpRequest";
      }
      if (item.headers) {
        for (var n in item.headers) {
          headers[n] = item.headers[n];
        }
      }
      for (n in headers) {
        req.setRequestHeader(n, headers[n]);
      }
      if (req instanceof XMLHttpRequest && item.withCredentials !== undefined) {
        req.withCredentials = item.withCredentials;
      }
      this._request = req;
      return true;
    };
    p._clean = function() {
      clearTimeout(this._loadTimeout);
      if (this._request.removeEventListener != null) {
        this._request.removeEventListener("loadstart", this._handleLoadStartProxy);
        this._request.removeEventListener("progress", this._handleProgressProxy);
        this._request.removeEventListener("abort", this._handleAbortProxy);
        this._request.removeEventListener("error", this._handleErrorProxy);
        this._request.removeEventListener("timeout", this._handleTimeoutProxy);
        this._request.removeEventListener("load", this._handleLoadProxy);
        this._request.removeEventListener("readystatechange", this._handleReadyStateChangeProxy);
      } else {
        this._request.onloadstart = null;
        this._request.onprogress = null;
        this._request.onabort = null;
        this._request.onerror = null;
        this._request.ontimeout = null;
        this._request.onload = null;
        this._request.onreadystatechange = null;
      }
    };
    p.toString = function() {
      return "[PreloadJS XHRRequest]";
    };
    createjs.XHRRequest = createjs.promote(XHRRequest, "AbstractRequest");
  }());
  this.createjs = this.createjs || {};
  (function() {
    "use strict";
    function LoadQueue(preferXHR, basePath, crossOrigin) {
      this.AbstractLoader_constructor();
      this._plugins = [];
      this._typeCallbacks = {};
      this._extensionCallbacks = {};
      this.next = null;
      this.maintainScriptOrder = true;
      this.stopOnError = false;
      this._maxConnections = 1;
      this._availableLoaders = [createjs.ImageLoader, createjs.JavaScriptLoader, createjs.CSSLoader, createjs.JSONLoader, createjs.JSONPLoader, createjs.SoundLoader, createjs.ManifestLoader, createjs.SpriteSheetLoader, createjs.XMLLoader, createjs.SVGLoader, createjs.BinaryLoader, createjs.VideoLoader, createjs.TextLoader];
      this._defaultLoaderLength = this._availableLoaders.length;
      this.init(preferXHR, basePath, crossOrigin);
    }
    var p = createjs.extend(LoadQueue, createjs.AbstractLoader);
    var s = LoadQueue;
    p.init = function(preferXHR, basePath, crossOrigin) {
      this.useXHR = true;
      this.preferXHR = true;
      this._preferXHR = true;
      this.setPreferXHR(preferXHR);
      this._paused = false;
      this._basePath = basePath;
      this._crossOrigin = crossOrigin;
      this._loadStartWasDispatched = false;
      this._currentlyLoadingScript = null;
      this._currentLoads = [];
      this._loadQueue = [];
      this._loadQueueBackup = [];
      this._loadItemsById = {};
      this._loadItemsBySrc = {};
      this._loadedResults = {};
      this._loadedRawResults = {};
      this._numItems = 0;
      this._numItemsLoaded = 0;
      this._scriptOrder = [];
      this._loadedScripts = [];
      this._lastProgress = NaN;
    };
    s.loadTimeout = 8000;
    s.LOAD_TIMEOUT = 0;
    s.BINARY = createjs.AbstractLoader.BINARY;
    s.CSS = createjs.AbstractLoader.CSS;
    s.IMAGE = createjs.AbstractLoader.IMAGE;
    s.JAVASCRIPT = createjs.AbstractLoader.JAVASCRIPT;
    s.JSON = createjs.AbstractLoader.JSON;
    s.JSONP = createjs.AbstractLoader.JSONP;
    s.MANIFEST = createjs.AbstractLoader.MANIFEST;
    s.SOUND = createjs.AbstractLoader.SOUND;
    s.VIDEO = createjs.AbstractLoader.VIDEO;
    s.SVG = createjs.AbstractLoader.SVG;
    s.TEXT = createjs.AbstractLoader.TEXT;
    s.XML = createjs.AbstractLoader.XML;
    s.POST = createjs.AbstractLoader.POST;
    s.GET = createjs.AbstractLoader.GET;
    p.registerLoader = function(loader) {
      if (!loader || !loader.canLoadItem) {
        throw new Error("loader is of an incorrect type.");
      } else if (this._availableLoaders.indexOf(loader) != -1) {
        throw new Error("loader already exists.");
      }
      this._availableLoaders.unshift(loader);
    };
    p.unregisterLoader = function(loader) {
      var idx = this._availableLoaders.indexOf(loader);
      if (idx != -1 && idx < this._defaultLoaderLength - 1) {
        this._availableLoaders.splice(idx, 1);
      }
    };
    p.setUseXHR = function(value) {
      return this.setPreferXHR(value);
    };
    p.setPreferXHR = function(value) {
      this.preferXHR = (value != false && window.XMLHttpRequest != null);
      return this.preferXHR;
    };
    p.removeAll = function() {
      this.remove();
    };
    p.remove = function(idsOrUrls) {
      var args = null;
      if (idsOrUrls && !Array.isArray(idsOrUrls)) {
        args = [idsOrUrls];
      } else if (idsOrUrls) {
        args = idsOrUrls;
      } else if (arguments.length > 0) {
        return;
      }
      var itemsWereRemoved = false;
      if (!args) {
        this.close();
        for (var n in this._loadItemsById) {
          this._disposeItem(this._loadItemsById[n]);
        }
        this.init(this.preferXHR, this._basePath);
      } else {
        while (args.length) {
          var item = args.pop();
          var r = this.getResult(item);
          for (i = this._loadQueue.length - 1; i >= 0; i--) {
            loadItem = this._loadQueue[i].getItem();
            if (loadItem.id == item || loadItem.src == item) {
              this._loadQueue.splice(i, 1)[0].cancel();
              break;
            }
          }
          for (i = this._loadQueueBackup.length - 1; i >= 0; i--) {
            loadItem = this._loadQueueBackup[i].getItem();
            if (loadItem.id == item || loadItem.src == item) {
              this._loadQueueBackup.splice(i, 1)[0].cancel();
              break;
            }
          }
          if (r) {
            this._disposeItem(this.getItem(item));
          } else {
            for (var i = this._currentLoads.length - 1; i >= 0; i--) {
              var loadItem = this._currentLoads[i].getItem();
              if (loadItem.id == item || loadItem.src == item) {
                this._currentLoads.splice(i, 1)[0].cancel();
                itemsWereRemoved = true;
                break;
              }
            }
          }
        }
        if (itemsWereRemoved) {
          this._loadNext();
        }
      }
    };
    p.reset = function() {
      this.close();
      for (var n in this._loadItemsById) {
        this._disposeItem(this._loadItemsById[n]);
      }
      var a = [];
      for (var i = 0,
          l = this._loadQueueBackup.length; i < l; i++) {
        a.push(this._loadQueueBackup[i].getItem());
      }
      this.loadManifest(a, false);
    };
    p.installPlugin = function(plugin) {
      if (plugin == null) {
        return;
      }
      if (plugin.getPreloadHandlers != null) {
        this._plugins.push(plugin);
        var map = plugin.getPreloadHandlers();
        map.scope = plugin;
        if (map.types != null) {
          for (var i = 0,
              l = map.types.length; i < l; i++) {
            this._typeCallbacks[map.types[i]] = map;
          }
        }
        if (map.extensions != null) {
          for (i = 0, l = map.extensions.length; i < l; i++) {
            this._extensionCallbacks[map.extensions[i]] = map;
          }
        }
      }
    };
    p.setMaxConnections = function(value) {
      this._maxConnections = value;
      if (!this._paused && this._loadQueue.length > 0) {
        this._loadNext();
      }
    };
    p.loadFile = function(file, loadNow, basePath) {
      if (file == null) {
        var event = new createjs.ErrorEvent("PRELOAD_NO_FILE");
        this._sendError(event);
        return;
      }
      this._addItem(file, null, basePath);
      if (loadNow !== false) {
        this.setPaused(false);
      } else {
        this.setPaused(true);
      }
    };
    p.loadManifest = function(manifest, loadNow, basePath) {
      var fileList = null;
      var path = null;
      if (Array.isArray(manifest)) {
        if (manifest.length == 0) {
          var event = new createjs.ErrorEvent("PRELOAD_MANIFEST_EMPTY");
          this._sendError(event);
          return;
        }
        fileList = manifest;
      } else if (typeof(manifest) === "string") {
        fileList = [{
          src: manifest,
          type: s.MANIFEST
        }];
      } else if (typeof(manifest) == "object") {
        if (manifest.src !== undefined) {
          if (manifest.type == null) {
            manifest.type = s.MANIFEST;
          } else if (manifest.type != s.MANIFEST) {
            var event = new createjs.ErrorEvent("PRELOAD_MANIFEST_TYPE");
            this._sendError(event);
          }
          fileList = [manifest];
        } else if (manifest.manifest !== undefined) {
          fileList = manifest.manifest;
          path = manifest.path;
        }
      } else {
        var event = new createjs.ErrorEvent("PRELOAD_MANIFEST_NULL");
        this._sendError(event);
        return;
      }
      for (var i = 0,
          l = fileList.length; i < l; i++) {
        this._addItem(fileList[i], path, basePath);
      }
      if (loadNow !== false) {
        this.setPaused(false);
      } else {
        this.setPaused(true);
      }
    };
    p.load = function() {
      this.setPaused(false);
    };
    p.getItem = function(value) {
      return this._loadItemsById[value] || this._loadItemsBySrc[value];
    };
    p.getResult = function(value, rawResult) {
      var item = this._loadItemsById[value] || this._loadItemsBySrc[value];
      if (item == null) {
        return null;
      }
      var id = item.id;
      if (rawResult && this._loadedRawResults[id]) {
        return this._loadedRawResults[id];
      }
      return this._loadedResults[id];
    };
    p.getItems = function(loaded) {
      var arr = [];
      for (var n in this._loadItemsById) {
        var item = this._loadItemsById[n];
        var result = this.getResult(n);
        if (loaded === true && result == null) {
          continue;
        }
        arr.push({
          item: item,
          result: result,
          rawResult: this.getResult(n, true)
        });
      }
      return arr;
    };
    p.setPaused = function(value) {
      this._paused = value;
      if (!this._paused) {
        this._loadNext();
      }
    };
    p.close = function() {
      while (this._currentLoads.length) {
        this._currentLoads.pop().cancel();
      }
      this._scriptOrder.length = 0;
      this._loadedScripts.length = 0;
      this.loadStartWasDispatched = false;
      this._itemCount = 0;
      this._lastProgress = NaN;
    };
    p._addItem = function(value, path, basePath) {
      var item = this._createLoadItem(value, path, basePath);
      if (item == null) {
        return;
      }
      var loader = this._createLoader(item);
      if (loader != null) {
        if ("plugins" in loader) {
          loader.plugins = this._plugins;
        }
        item._loader = loader;
        this._loadQueue.push(loader);
        this._loadQueueBackup.push(loader);
        this._numItems++;
        this._updateProgress();
        if ((this.maintainScriptOrder && item.type == createjs.LoadQueue.JAVASCRIPT) || item.maintainOrder === true) {
          this._scriptOrder.push(item);
          this._loadedScripts.push(null);
        }
      }
    };
    p._createLoadItem = function(value, path, basePath) {
      var item = createjs.LoadItem.create(value);
      if (item == null) {
        return null;
      }
      var bp = "";
      var useBasePath = basePath || this._basePath;
      if (item.src instanceof Object) {
        if (!item.type) {
          return null;
        }
        if (path) {
          bp = path;
          var pathMatch = createjs.RequestUtils.parseURI(path);
          if (useBasePath != null && !pathMatch.absolute && !pathMatch.relative) {
            bp = useBasePath + bp;
          }
        } else if (useBasePath != null) {
          bp = useBasePath;
        }
      } else {
        var match = createjs.RequestUtils.parseURI(item.src);
        if (match.extension) {
          item.ext = match.extension;
        }
        if (item.type == null) {
          item.type = createjs.RequestUtils.getTypeByExtension(item.ext);
        }
        var autoId = item.src;
        if (!match.absolute && !match.relative) {
          if (path) {
            bp = path;
            var pathMatch = createjs.RequestUtils.parseURI(path);
            autoId = path + autoId;
            if (useBasePath != null && !pathMatch.absolute && !pathMatch.relative) {
              bp = useBasePath + bp;
            }
          } else if (useBasePath != null) {
            bp = useBasePath;
          }
        }
        item.src = bp + item.src;
      }
      item.path = bp;
      if (item.id === undefined || item.id === null || item.id === "") {
        item.id = autoId;
      }
      var customHandler = this._typeCallbacks[item.type] || this._extensionCallbacks[item.ext];
      if (customHandler) {
        var result = customHandler.callback.call(customHandler.scope, item, this);
        if (result === false) {
          return null;
        } else if (result === true) {} else if (result != null) {
          item._loader = result;
        }
        match = createjs.RequestUtils.parseURI(item.src);
        if (match.extension != null) {
          item.ext = match.extension;
        }
      }
      this._loadItemsById[item.id] = item;
      this._loadItemsBySrc[item.src] = item;
      if (item.crossOrigin == null) {
        item.crossOrigin = this._crossOrigin;
      }
      return item;
    };
    p._createLoader = function(item) {
      if (item._loader != null) {
        return item._loader;
      }
      var preferXHR = this.preferXHR;
      for (var i = 0; i < this._availableLoaders.length; i++) {
        var loader = this._availableLoaders[i];
        if (loader && loader.canLoadItem(item)) {
          return new loader(item, preferXHR);
        }
      }
      return null;
    };
    p._loadNext = function() {
      if (this._paused) {
        return;
      }
      if (!this._loadStartWasDispatched) {
        this._sendLoadStart();
        this._loadStartWasDispatched = true;
      }
      if (this._numItems == this._numItemsLoaded) {
        this.loaded = true;
        this._sendComplete();
        if (this.next && this.next.load) {
          this.next.load();
        }
      } else {
        this.loaded = false;
      }
      for (var i = 0; i < this._loadQueue.length; i++) {
        if (this._currentLoads.length >= this._maxConnections) {
          break;
        }
        var loader = this._loadQueue[i];
        if (!this._canStartLoad(loader)) {
          continue;
        }
        this._loadQueue.splice(i, 1);
        i--;
        this._loadItem(loader);
      }
    };
    p._loadItem = function(loader) {
      loader.on("fileload", this._handleFileLoad, this);
      loader.on("progress", this._handleProgress, this);
      loader.on("complete", this._handleFileComplete, this);
      loader.on("error", this._handleError, this);
      loader.on("fileerror", this._handleFileError, this);
      this._currentLoads.push(loader);
      this._sendFileStart(loader.getItem());
      loader.load();
    };
    p._handleFileLoad = function(event) {
      event.target = null;
      this.dispatchEvent(event);
    };
    p._handleFileError = function(event) {
      var newEvent = new createjs.ErrorEvent("FILE_LOAD_ERROR", null, event.item);
      this._sendError(newEvent);
    };
    p._handleError = function(event) {
      var loader = event.target;
      this._numItemsLoaded++;
      this._finishOrderedItem(loader, true);
      this._updateProgress();
      var newEvent = new createjs.ErrorEvent("FILE_LOAD_ERROR", null, loader.getItem());
      this._sendError(newEvent);
      if (!this.stopOnError) {
        this._removeLoadItem(loader);
        this._cleanLoadItem(loader);
        this._loadNext();
      } else {
        this.setPaused(true);
      }
    };
    p._handleFileComplete = function(event) {
      var loader = event.target;
      var item = loader.getItem();
      var result = loader.getResult();
      this._loadedResults[item.id] = result;
      var rawResult = loader.getResult(true);
      if (rawResult != null && rawResult !== result) {
        this._loadedRawResults[item.id] = rawResult;
      }
      this._saveLoadedItems(loader);
      this._removeLoadItem(loader);
      if (!this._finishOrderedItem(loader)) {
        this._processFinishedLoad(item, loader);
      }
      this._cleanLoadItem(loader);
    };
    p._saveLoadedItems = function(loader) {
      var list = loader.getLoadedItems();
      if (list === null) {
        return;
      }
      for (var i = 0; i < list.length; i++) {
        var item = list[i].item;
        this._loadItemsBySrc[item.src] = item;
        this._loadItemsById[item.id] = item;
        this._loadedResults[item.id] = list[i].result;
        this._loadedRawResults[item.id] = list[i].rawResult;
      }
    };
    p._finishOrderedItem = function(loader, loadFailed) {
      var item = loader.getItem();
      if ((this.maintainScriptOrder && item.type == createjs.LoadQueue.JAVASCRIPT) || item.maintainOrder) {
        if (loader instanceof createjs.JavaScriptLoader) {
          this._currentlyLoadingScript = false;
        }
        var index = createjs.indexOf(this._scriptOrder, item);
        if (index == -1) {
          return false;
        }
        this._loadedScripts[index] = (loadFailed === true) ? true : item;
        this._checkScriptLoadOrder();
        return true;
      }
      return false;
    };
    p._checkScriptLoadOrder = function() {
      var l = this._loadedScripts.length;
      for (var i = 0; i < l; i++) {
        var item = this._loadedScripts[i];
        if (item === null) {
          break;
        }
        if (item === true) {
          continue;
        }
        var loadItem = this._loadedResults[item.id];
        if (item.type == createjs.LoadQueue.JAVASCRIPT) {
          createjs.DomUtils.appendToHead(loadItem);
        }
        var loader = item._loader;
        this._processFinishedLoad(item, loader);
        this._loadedScripts[i] = true;
      }
    };
    p._processFinishedLoad = function(item, loader) {
      this._numItemsLoaded++;
      if (!this.maintainScriptOrder && item.type == createjs.LoadQueue.JAVASCRIPT) {
        var tag = loader.getTag();
        createjs.DomUtils.appendToHead(tag);
      }
      this._updateProgress();
      this._sendFileComplete(item, loader);
      this._loadNext();
    };
    p._canStartLoad = function(loader) {
      if (!this.maintainScriptOrder || loader.preferXHR) {
        return true;
      }
      var item = loader.getItem();
      if (item.type != createjs.LoadQueue.JAVASCRIPT) {
        return true;
      }
      if (this._currentlyLoadingScript) {
        return false;
      }
      var index = this._scriptOrder.indexOf(item);
      var i = 0;
      while (i < index) {
        var checkItem = this._loadedScripts[i];
        if (checkItem == null) {
          return false;
        }
        i++;
      }
      this._currentlyLoadingScript = true;
      return true;
    };
    p._removeLoadItem = function(loader) {
      var l = this._currentLoads.length;
      for (var i = 0; i < l; i++) {
        if (this._currentLoads[i] == loader) {
          this._currentLoads.splice(i, 1);
          break;
        }
      }
    };
    p._cleanLoadItem = function(loader) {
      var item = loader.getItem();
      if (item) {
        delete item._loader;
      }
    };
    p._handleProgress = function(event) {
      var loader = event.target;
      this._sendFileProgress(loader.getItem(), loader.progress);
      this._updateProgress();
    };
    p._updateProgress = function() {
      var loaded = this._numItemsLoaded / this._numItems;
      var remaining = this._numItems - this._numItemsLoaded;
      if (remaining > 0) {
        var chunk = 0;
        for (var i = 0,
            l = this._currentLoads.length; i < l; i++) {
          chunk += this._currentLoads[i].progress;
        }
        loaded += (chunk / remaining) * (remaining / this._numItems);
      }
      if (this._lastProgress != loaded) {
        this._sendProgress(loaded);
        this._lastProgress = loaded;
      }
    };
    p._disposeItem = function(item) {
      delete this._loadedResults[item.id];
      delete this._loadedRawResults[item.id];
      delete this._loadItemsById[item.id];
      delete this._loadItemsBySrc[item.src];
    };
    p._sendFileProgress = function(item, progress) {
      if (this._isCanceled() || this._paused) {
        return;
      }
      if (!this.hasEventListener("fileprogress")) {
        return;
      }
      var event = new createjs.Event("fileprogress");
      event.progress = progress;
      event.loaded = progress;
      event.total = 1;
      event.item = item;
      this.dispatchEvent(event);
    };
    p._sendFileComplete = function(item, loader) {
      if (this._isCanceled() || this._paused) {
        return;
      }
      var event = new createjs.Event("fileload");
      event.loader = loader;
      event.item = item;
      event.result = this._loadedResults[item.id];
      event.rawResult = this._loadedRawResults[item.id];
      if (item.completeHandler) {
        item.completeHandler(event);
      }
      this.hasEventListener("fileload") && this.dispatchEvent(event);
    };
    p._sendFileStart = function(item) {
      var event = new createjs.Event("filestart");
      event.item = item;
      this.hasEventListener("filestart") && this.dispatchEvent(event);
    };
    p.toString = function() {
      return "[PreloadJS LoadQueue]";
    };
    createjs.LoadQueue = createjs.promote(LoadQueue, "AbstractLoader");
  }());
  this.createjs = this.createjs || {};
  (function() {
    "use strict";
    function TextLoader(loadItem) {
      this.AbstractLoader_constructor(loadItem, true, createjs.AbstractLoader.TEXT);
    }
    ;
    var p = createjs.extend(TextLoader, createjs.AbstractLoader);
    var s = TextLoader;
    s.canLoadItem = function(item) {
      return item.type == createjs.AbstractLoader.TEXT;
    };
    createjs.TextLoader = createjs.promote(TextLoader, "AbstractLoader");
  }());
  this.createjs = this.createjs || {};
  (function() {
    "use strict";
    function BinaryLoader(loadItem) {
      this.AbstractLoader_constructor(loadItem, true, createjs.AbstractLoader.BINARY);
      this.on("initialize", this._updateXHR, this);
    }
    ;
    var p = createjs.extend(BinaryLoader, createjs.AbstractLoader);
    var s = BinaryLoader;
    s.canLoadItem = function(item) {
      return item.type == createjs.AbstractLoader.BINARY;
    };
    p._updateXHR = function(event) {
      event.loader.setResponseType("arraybuffer");
    };
    createjs.BinaryLoader = createjs.promote(BinaryLoader, "AbstractLoader");
  }());
  this.createjs = this.createjs || {};
  (function() {
    "use strict";
    function CSSLoader(loadItem, preferXHR) {
      this.AbstractLoader_constructor(loadItem, preferXHR, createjs.AbstractLoader.CSS);
      this.resultFormatter = this._formatResult;
      this._tagSrcAttribute = "href";
      if (preferXHR) {
        this._tag = document.createElement("style");
      } else {
        this._tag = document.createElement("link");
      }
      this._tag.rel = "stylesheet";
      this._tag.type = "text/css";
    }
    ;
    var p = createjs.extend(CSSLoader, createjs.AbstractLoader);
    var s = CSSLoader;
    s.canLoadItem = function(item) {
      return item.type == createjs.AbstractLoader.CSS;
    };
    p._formatResult = function(loader) {
      if (this._preferXHR) {
        var tag = loader.getTag();
        if (tag.styleSheet) {
          tag.styleSheet.cssText = loader.getResult(true);
        } else {
          var textNode = document.createTextNode(loader.getResult(true));
          tag.appendChild(textNode);
        }
      } else {
        tag = this._tag;
      }
      createjs.DomUtils.appendToHead(tag);
      return tag;
    };
    createjs.CSSLoader = createjs.promote(CSSLoader, "AbstractLoader");
  }());
  this.createjs = this.createjs || {};
  (function() {
    "use strict";
    function ImageLoader(loadItem, preferXHR) {
      this.AbstractLoader_constructor(loadItem, preferXHR, createjs.AbstractLoader.IMAGE);
      this.resultFormatter = this._formatResult;
      this._tagSrcAttribute = "src";
      if (createjs.RequestUtils.isImageTag(loadItem)) {
        this._tag = loadItem;
      } else if (createjs.RequestUtils.isImageTag(loadItem.src)) {
        this._tag = loadItem.src;
      } else if (createjs.RequestUtils.isImageTag(loadItem.tag)) {
        this._tag = loadItem.tag;
      }
      if (this._tag != null) {
        this._preferXHR = false;
      } else {
        this._tag = document.createElement("img");
      }
      this.on("initialize", this._updateXHR, this);
    }
    ;
    var p = createjs.extend(ImageLoader, createjs.AbstractLoader);
    var s = ImageLoader;
    s.canLoadItem = function(item) {
      return item.type == createjs.AbstractLoader.IMAGE;
    };
    p.load = function() {
      if (this._tag.src != "" && this._tag.complete) {
        this._sendComplete();
        return;
      }
      var crossOrigin = this._item.crossOrigin;
      if (crossOrigin == true) {
        crossOrigin = "Anonymous";
      }
      if (crossOrigin != null && !createjs.RequestUtils.isLocal(this._item.src)) {
        this._tag.crossOrigin = crossOrigin;
      }
      this.AbstractLoader_load();
    };
    p._updateXHR = function(event) {
      event.loader.mimeType = 'text/plain; charset=x-user-defined-binary';
      if (event.loader.setResponseType) {
        event.loader.setResponseType("blob");
      }
    };
    p._formatResult = function(loader) {
      return this._formatImage;
    };
    p._formatImage = function(successCallback, errorCallback) {
      var tag = this._tag;
      var URL = window.URL || window.webkitURL;
      if (!this._preferXHR) {} else if (URL) {
        var objURL = URL.createObjectURL(this.getResult(true));
        tag.src = objURL;
        tag.addEventListener("load", this._cleanUpURL, false);
        tag.addEventListener("error", this._cleanUpURL, false);
      } else {
        tag.src = this._item.src;
      }
      if (tag.complete) {
        successCallback(tag);
      } else {
        tag.onload = createjs.proxy(function() {
          successCallback(this._tag);
        }, this);
        tag.onerror = createjs.proxy(function() {
          errorCallback(_this._tag);
        }, this);
      }
    };
    p._cleanUpURL = function(event) {
      var URL = window.URL || window.webkitURL;
      URL.revokeObjectURL(event.target.src);
    };
    createjs.ImageLoader = createjs.promote(ImageLoader, "AbstractLoader");
  }());
  this.createjs = this.createjs || {};
  (function() {
    "use strict";
    function JavaScriptLoader(loadItem, preferXHR) {
      this.AbstractLoader_constructor(loadItem, preferXHR, createjs.AbstractLoader.JAVASCRIPT);
      this.resultFormatter = this._formatResult;
      this._tagSrcAttribute = "src";
      this.setTag(document.createElement("script"));
    }
    ;
    var p = createjs.extend(JavaScriptLoader, createjs.AbstractLoader);
    var s = JavaScriptLoader;
    s.canLoadItem = function(item) {
      return item.type == createjs.AbstractLoader.JAVASCRIPT;
    };
    p._formatResult = function(loader) {
      var tag = loader.getTag();
      if (this._preferXHR) {
        tag.text = loader.getResult(true);
      }
      return tag;
    };
    createjs.JavaScriptLoader = createjs.promote(JavaScriptLoader, "AbstractLoader");
  }());
  this.createjs = this.createjs || {};
  (function() {
    "use strict";
    function JSONLoader(loadItem) {
      this.AbstractLoader_constructor(loadItem, true, createjs.AbstractLoader.JSON);
      this.resultFormatter = this._formatResult;
    }
    ;
    var p = createjs.extend(JSONLoader, createjs.AbstractLoader);
    var s = JSONLoader;
    s.canLoadItem = function(item) {
      return item.type == createjs.AbstractLoader.JSON;
    };
    p._formatResult = function(loader) {
      var json = null;
      try {
        json = createjs.DataUtils.parseJSON(loader.getResult(true));
      } catch (e) {
        var event = new createjs.ErrorEvent("JSON_FORMAT", null, e);
        this._sendError(event);
        return e;
      }
      return json;
    };
    createjs.JSONLoader = createjs.promote(JSONLoader, "AbstractLoader");
  }());
  this.createjs = this.createjs || {};
  (function() {
    "use strict";
    function JSONPLoader(loadItem) {
      this.AbstractLoader_constructor(loadItem, false, createjs.AbstractLoader.JSONP);
      this.setTag(document.createElement("script"));
      this.getTag().type = "text/javascript";
    }
    ;
    var p = createjs.extend(JSONPLoader, createjs.AbstractLoader);
    var s = JSONPLoader;
    s.canLoadItem = function(item) {
      return item.type == createjs.AbstractLoader.JSONP;
    };
    p.cancel = function() {
      this.AbstractLoader_cancel();
      this._dispose();
    };
    p.load = function() {
      if (this._item.callback == null) {
        throw new Error('callback is required for loading JSONP requests.');
      }
      if (window[this._item.callback] != null) {
        throw new Error("JSONP callback '" + this._item.callback + "' already exists on window. You need to specify a different callback or re-name the current one.");
      }
      window[this._item.callback] = createjs.proxy(this._handleLoad, this);
      window.document.body.appendChild(this._tag);
      this._loadTimeout = setTimeout(createjs.proxy(this._handleTimeout, this), this._item.loadTimeout);
      this._tag.src = this._item.src;
    };
    p._handleLoad = function(data) {
      this._result = this._rawResult = data;
      this._sendComplete();
      this._dispose();
    };
    p._handleTimeout = function() {
      this._dispose();
      this.dispatchEvent(new createjs.ErrorEvent("timeout"));
    };
    p._dispose = function() {
      window.document.body.removeChild(this._tag);
      delete window[this._item.callback];
      clearTimeout(this._loadTimeout);
    };
    createjs.JSONPLoader = createjs.promote(JSONPLoader, "AbstractLoader");
  }());
  this.createjs = this.createjs || {};
  (function() {
    "use strict";
    function ManifestLoader(loadItem) {
      this.AbstractLoader_constructor(loadItem, null, createjs.AbstractLoader.MANIFEST);
      this.plugins = null;
      this._manifestQueue = null;
    }
    ;
    var p = createjs.extend(ManifestLoader, createjs.AbstractLoader);
    var s = ManifestLoader;
    s.MANIFEST_PROGRESS = 0.25;
    s.canLoadItem = function(item) {
      return item.type == createjs.AbstractLoader.MANIFEST;
    };
    p.load = function() {
      this.AbstractLoader_load();
    };
    p._createRequest = function() {
      var callback = this._item.callback;
      if (callback != null) {
        this._request = new createjs.JSONPLoader(this._item);
      } else {
        this._request = new createjs.JSONLoader(this._item);
      }
    };
    p.handleEvent = function(event) {
      switch (event.type) {
        case "complete":
          this._rawResult = event.target.getResult(true);
          this._result = event.target.getResult();
          this._sendProgress(s.MANIFEST_PROGRESS);
          this._loadManifest(this._result);
          return;
        case "progress":
          event.loaded *= s.MANIFEST_PROGRESS;
          this.progress = event.loaded / event.total;
          if (isNaN(this.progress) || this.progress == Infinity) {
            this.progress = 0;
          }
          this._sendProgress(event);
          return;
      }
      this.AbstractLoader_handleEvent(event);
    };
    p.destroy = function() {
      this.AbstractLoader_destroy();
      this._manifestQueue.close();
    };
    p._loadManifest = function(json) {
      if (json && json.manifest) {
        var queue = this._manifestQueue = new createjs.LoadQueue();
        queue.on("fileload", this._handleManifestFileLoad, this);
        queue.on("progress", this._handleManifestProgress, this);
        queue.on("complete", this._handleManifestComplete, this, true);
        queue.on("error", this._handleManifestError, this, true);
        for (var i = 0,
            l = this.plugins.length; i < l; i++) {
          queue.installPlugin(this.plugins[i]);
        }
        queue.loadManifest(json);
      } else {
        this._sendComplete();
      }
    };
    p._handleManifestFileLoad = function(event) {
      event.target = null;
      this.dispatchEvent(event);
    };
    p._handleManifestComplete = function(event) {
      this._loadedItems = this._manifestQueue.getItems(true);
      this._sendComplete();
    };
    p._handleManifestProgress = function(event) {
      this.progress = event.progress * (1 - s.MANIFEST_PROGRESS) + s.MANIFEST_PROGRESS;
      this._sendProgress(this.progress);
    };
    p._handleManifestError = function(event) {
      var newEvent = new createjs.Event("fileerror");
      newEvent.item = event.data;
      this.dispatchEvent(newEvent);
    };
    createjs.ManifestLoader = createjs.promote(ManifestLoader, "AbstractLoader");
  }());
  this.createjs = this.createjs || {};
  (function() {
    "use strict";
    function SoundLoader(loadItem, preferXHR) {
      this.AbstractMediaLoader_constructor(loadItem, preferXHR, createjs.AbstractLoader.SOUND);
      if (createjs.RequestUtils.isAudioTag(loadItem)) {
        this._tag = loadItem;
      } else if (createjs.RequestUtils.isAudioTag(loadItem.src)) {
        this._tag = loadItem;
      } else if (createjs.RequestUtils.isAudioTag(loadItem.tag)) {
        this._tag = createjs.RequestUtils.isAudioTag(loadItem) ? loadItem : loadItem.src;
      }
      if (this._tag != null) {
        this._preferXHR = false;
      }
    }
    ;
    var p = createjs.extend(SoundLoader, createjs.AbstractMediaLoader);
    var s = SoundLoader;
    s.canLoadItem = function(item) {
      return item.type == createjs.AbstractLoader.SOUND;
    };
    p._createTag = function(src) {
      var tag = document.createElement("audio");
      tag.autoplay = false;
      tag.preload = "none";
      tag.src = src;
      return tag;
    };
    createjs.SoundLoader = createjs.promote(SoundLoader, "AbstractMediaLoader");
  }());
  this.createjs = this.createjs || {};
  (function() {
    "use strict";
    function VideoLoader(loadItem, preferXHR) {
      this.AbstractMediaLoader_constructor(loadItem, preferXHR, createjs.AbstractLoader.VIDEO);
      if (createjs.RequestUtils.isVideoTag(loadItem) || createjs.RequestUtils.isVideoTag(loadItem.src)) {
        this.setTag(createjs.RequestUtils.isVideoTag(loadItem) ? loadItem : loadItem.src);
        this._preferXHR = false;
      } else {
        this.setTag(this._createTag());
      }
    }
    ;
    var p = createjs.extend(VideoLoader, createjs.AbstractMediaLoader);
    var s = VideoLoader;
    p._createTag = function() {
      return document.createElement("video");
    };
    s.canLoadItem = function(item) {
      return item.type == createjs.AbstractLoader.VIDEO;
    };
    createjs.VideoLoader = createjs.promote(VideoLoader, "AbstractMediaLoader");
  }());
  this.createjs = this.createjs || {};
  (function() {
    "use strict";
    function SpriteSheetLoader(loadItem, preferXHR) {
      this.AbstractLoader_constructor(loadItem, preferXHR, createjs.AbstractLoader.SPRITESHEET);
      this._manifestQueue = null;
    }
    var p = createjs.extend(SpriteSheetLoader, createjs.AbstractLoader);
    var s = SpriteSheetLoader;
    s.SPRITESHEET_PROGRESS = 0.25;
    s.canLoadItem = function(item) {
      return item.type == createjs.AbstractLoader.SPRITESHEET;
    };
    p.destroy = function() {
      this.AbstractLoader_destroy;
      this._manifestQueue.close();
    };
    p._createRequest = function() {
      var callback = this._item.callback;
      if (callback != null) {
        this._request = new createjs.JSONPLoader(this._item);
      } else {
        this._request = new createjs.JSONLoader(this._item);
      }
    };
    p.handleEvent = function(event) {
      switch (event.type) {
        case "complete":
          this._rawResult = event.target.getResult(true);
          this._result = event.target.getResult();
          this._sendProgress(s.SPRITESHEET_PROGRESS);
          this._loadManifest(this._result);
          return;
        case "progress":
          event.loaded *= s.SPRITESHEET_PROGRESS;
          this.progress = event.loaded / event.total;
          if (isNaN(this.progress) || this.progress == Infinity) {
            this.progress = 0;
          }
          this._sendProgress(event);
          return;
      }
      this.AbstractLoader_handleEvent(event);
    };
    p._loadManifest = function(json) {
      if (json && json.images) {
        var queue = this._manifestQueue = new createjs.LoadQueue(this._preferXHR, this._item.path, this._item.crossOrigin);
        queue.on("complete", this._handleManifestComplete, this, true);
        queue.on("fileload", this._handleManifestFileLoad, this);
        queue.on("progress", this._handleManifestProgress, this);
        queue.on("error", this._handleManifestError, this, true);
        queue.loadManifest(json.images);
      }
    };
    p._handleManifestFileLoad = function(event) {
      var image = event.result;
      if (image != null) {
        var images = this.getResult().images;
        var pos = images.indexOf(event.item.src);
        images[pos] = image;
      }
    };
    p._handleManifestComplete = function(event) {
      this._result = new createjs.SpriteSheet(this._result);
      this._loadedItems = this._manifestQueue.getItems(true);
      this._sendComplete();
    };
    p._handleManifestProgress = function(event) {
      this.progress = event.progress * (1 - s.SPRITESHEET_PROGRESS) + s.SPRITESHEET_PROGRESS;
      this._sendProgress(this.progress);
    };
    p._handleManifestError = function(event) {
      var newEvent = new createjs.Event("fileerror");
      newEvent.item = event.data;
      this.dispatchEvent(newEvent);
    };
    createjs.SpriteSheetLoader = createjs.promote(SpriteSheetLoader, "AbstractLoader");
  }());
  this.createjs = this.createjs || {};
  (function() {
    "use strict";
    function SVGLoader(loadItem, preferXHR) {
      this.AbstractLoader_constructor(loadItem, preferXHR, createjs.AbstractLoader.SVG);
      this.resultFormatter = this._formatResult;
      this._tagSrcAttribute = "data";
      if (preferXHR) {
        this.setTag(document.createElement("svg"));
      } else {
        this.setTag(document.createElement("object"));
        this.getTag().type = "image/svg+xml";
      }
    }
    ;
    var p = createjs.extend(SVGLoader, createjs.AbstractLoader);
    var s = SVGLoader;
    s.canLoadItem = function(item) {
      return item.type == createjs.AbstractLoader.SVG;
    };
    p._formatResult = function(loader) {
      var xml = createjs.DataUtils.parseXML(loader.getResult(true), "text/xml");
      var tag = loader.getTag();
      if (!this._preferXHR && document.body.contains(tag)) {
        document.body.removeChild(tag);
      }
      if (xml.documentElement != null) {
        tag.appendChild(xml.documentElement);
        tag.style.visibility = "visible";
        return tag;
      } else {
        return xml;
      }
    };
    createjs.SVGLoader = createjs.promote(SVGLoader, "AbstractLoader");
  }());
  this.createjs = this.createjs || {};
  (function() {
    "use strict";
    function XMLLoader(loadItem) {
      this.AbstractLoader_constructor(loadItem, true, createjs.AbstractLoader.XML);
      this.resultFormatter = this._formatResult;
    }
    ;
    var p = createjs.extend(XMLLoader, createjs.AbstractLoader);
    var s = XMLLoader;
    s.canLoadItem = function(item) {
      return item.type == createjs.AbstractLoader.XML;
    };
    p._formatResult = function(loader) {
      return createjs.DataUtils.parseXML(loader.getResult(true), "text/xml");
    };
    createjs.XMLLoader = createjs.promote(XMLLoader, "AbstractLoader");
  }());
})(require('process'));
